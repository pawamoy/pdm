{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#introduction","title":"Introduction","text":"<p>PDM, as described, is a modern Python package and dependency manager supporting the latest PEP standards. But it is more than a package manager. It boosts your development workflow in various aspects. The most significant benefit is it installs and manages packages in a similar way to <code>npm</code> that doesn't need to create a virtualenv at all!</p>"},{"location":"#feature-highlights","title":"Feature highlights","text":"<ul> <li>Simple and fast dependency resolver, mainly for large binary distributions.</li> <li>A PEP 517 build backend.</li> <li>PEP 621 project metadata.</li> <li>Flexible and powerful plug-in system.</li> <li>Versatile user scripts.</li> <li>Opt-in centralized installation cache like pnpm.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>PDM requires Python 3.7+ to be installed. It works on multiple platforms including Windows, Linux and macOS.</p> <p>Note</p> <p>You can still have your project working on lower Python versions, read how to do it here.</p>"},{"location":"#recommended-installation-method","title":"Recommended installation method","text":"<p>PDM requires python version 3.7 or higher.</p> <p>Like Pip, PDM provides an installation script that will install PDM into an isolated environment.</p> Linux/MacWindows <pre><code>curl -sSL https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py | python3 -\n</code></pre> <pre><code>(Invoke-WebRequest -Uri https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py -UseBasicParsing).Content | python -\n</code></pre> <p>For security reasons, you should verify the checksum of <code>install-pdm.py</code>. The sha256 checksum is: <code>06abd94a6678636eba640529bf91b242759363c45d3620cdfabaa0053d826b30</code></p> <p>The installer will install PDM into the user site and the location depends on the system:</p> <ul> <li><code>$HOME/.local/bin</code> for Unix</li> <li><code>%APPDATA%\\Python\\Scripts</code> on Windows</li> </ul> <p>You can pass additional options to the script to control how PDM is installed:</p> <pre><code>usage: install-pdm.py [-h] [-v VERSION] [--prerelease] [--remove] [-p PATH] [-d DEP]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v VERSION, --version VERSION | envvar: PDM_VERSION\n                        Specify the version to be installed, or HEAD to install from the main branch\n  --prerelease | envvar: PDM_PRERELEASE    Allow prereleases to be installed\n  --remove | envvar: PDM_REMOVE            Remove the PDM installation\n  -p PATH, --path PATH | envvar: PDM_HOME  Specify the location to install PDM\n  -d DEP, --dep DEP | envvar: PDM_DEPS     Specify additional dependencies, can be given multiple times\n</code></pre> <p>You can either pass the options after the script or set the env var value.</p>"},{"location":"#other-installation-methods","title":"Other installation methods","text":"HomebrewScooppipxpipasdfinside project <pre><code>brew install pdm\n</code></pre> <pre><code>scoop bucket add frostming https://github.com/frostming/scoop-frostming.git\nscoop install pdm\n</code></pre> <pre><code>pipx install pdm\n</code></pre> <p>Install the head version of GitHub repository. Make sure you have installed Git LFS on your system.</p> <pre><code>pipx install git+https://github.com/pdm-project/pdm.git@main#egg=pdm\n</code></pre> <p>See also: https://pypa.github.io/pipx/</p> <pre><code>pip install --user pdm\n</code></pre> <p>Assuming you have asdf installed. <pre><code>asdf plugin add pdm\nasdf local pdm latest\nasdf install pdm\n</code></pre></p> <p>By copying the Pyprojectx wrapper scripts to a project, you can install PDM as (npm-style) dev dependency inside that project. This allows different projects/branches to use different PDM versions.</p> <p>To initialize a new or existing project, cd into the project folder and:</p> Linux/MacWindows <pre><code>curl -LO https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip &amp;&amp; unzip wrappers.zip &amp;&amp; rm -f wrappers.zip\n./pw --init pdm\n</code></pre> <pre><code>Invoke-WebRequest https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip -OutFile wrappers.zip; Expand-Archive -Path wrappers.zip -DestinationPath .; Remove-Item -Path wrappers.zip\n.\\pw --init pdm\n</code></pre>"},{"location":"#update-the-pdm-version","title":"Update the PDM version","text":"<pre><code>pdm self update\n</code></pre>"},{"location":"#packaging-status","title":"Packaging Status","text":""},{"location":"#shell-completion","title":"Shell Completion","text":"<p>PDM supports generating completion scripts for Bash, Zsh, Fish or Powershell. Here are some common locations for each shell:</p> BashZshFishPowershell <pre><code>pdm completion bash &gt; /etc/bash_completion.d/pdm.bash-completion\n</code></pre> <pre><code># Make sure ~/.zfunc is added to fpath, before compinit.\npdm completion zsh &gt; ~/.zfunc/_pdm\n</code></pre> <p>Oh-My-Zsh:</p> <pre><code>mkdir $ZSH_CUSTOM/plugins/pdm\npdm completion zsh &gt; $ZSH_CUSTOM/plugins/pdm/_pdm\n</code></pre> <p>Then make sure pdm plugin is enabled in ~/.zshrc</p> <pre><code>pdm completion fish &gt; ~/.config/fish/completions/pdm.fish\n</code></pre> <pre><code># Create a directory to store completion scripts\nmkdir $PROFILE\\..\\Completions\necho @'\nGet-ChildItem \"$PROFILE\\..\\Completions\\\" | ForEach-Object {\n    . $_.FullName\n}\n'@ | Out-File -Append -Encoding utf8 $PROFILE\n# Generate script\nSet-ExecutionPolicy Unrestricted -Scope CurrentUser\npdm completion powershell | Out-File -Encoding utf8 $PROFILE\\..\\Completions\\pdm_completion.ps1\n</code></pre>"},{"location":"#virtualenv-and-pep-582","title":"Virtualenv and PEP 582","text":"<p>PDM offers experimental support for PEP 582 as an opt-in feature, in addition to virtualenv management. Although the Python Steering Council has rejected PEP 582, you can still test it out using PDM.</p> <p>To learn more about the two modes, refer to the relevant chapters on Working with virtualenv and Working with PEP 582.</p>"},{"location":"#pdm-eco-system","title":"PDM Eco-system","text":"<p>Awesome PDM is a curated list of awesome PDM plugins and resources.</p>"},{"location":"#sponsors","title":"Sponsors","text":""},{"location":"dev/benchmark/","title":"Benchmark","text":"<p>This page has been removed, please visit https://lincolnloop.github.io/python-package-manager-shootout/ for a detailed benchmark report.</p>"},{"location":"dev/changelog/","title":"Changelog","text":""},{"location":"dev/fixtures/","title":"Pytest fixtures","text":"<p>Some reusable fixtures for <code>pytest</code>.</p> <p>New in version 2.4.0</p> <p>To enable them in your test, add <code>pdm.pytest</code> as a plugin. You can do so in your root <code>conftest.py</code>:</p> conftest.py<pre><code># single plugin\npytest_plugins = \"pytest.plugin\"\n\n# many plugins\npytest_plugins = [\n    ...\n    \"pdm.pytest\",\n    ...\n]\n</code></pre>"},{"location":"dev/fixtures/#pdm.pytest.IndexMap","title":"<code>IndexMap = Dict[str, Path]</code>  <code>module-attribute</code>","text":"<p>Path some root-relative http paths to some local paths</p>"},{"location":"dev/fixtures/#pdm.pytest.IndexOverrides","title":"<code>IndexOverrides = Dict[str, str]</code>  <code>module-attribute</code>","text":"<p>PyPI indexes overrides fixture format</p>"},{"location":"dev/fixtures/#pdm.pytest.IndexesDefinition","title":"<code>IndexesDefinition = Dict[str, Union[Tuple[IndexMap, IndexOverrides, bool], IndexMap]]</code>  <code>module-attribute</code>","text":"<p>Mock PyPI indexes format</p>"},{"location":"dev/fixtures/#pdm.pytest.Distribution","title":"<code>Distribution</code>","text":"<p>A mock Distribution</p>"},{"location":"dev/fixtures/#pdm.pytest.LocalFileAdapter","title":"<code>LocalFileAdapter</code>","text":"<p>         Bases: <code>requests.adapters.BaseAdapter</code></p> <p>A local file adapter for request.</p> <p>Allows to mock some HTTP requests with some local files</p>"},{"location":"dev/fixtures/#pdm.pytest.MockWorkingSet","title":"<code>MockWorkingSet</code>","text":"<p>         Bases: <code>collections.abc.MutableMapping</code></p> <p>A mock working set</p>"},{"location":"dev/fixtures/#pdm.pytest.PDMCallable","title":"<code>PDMCallable</code>","text":"<p>         Bases: <code>Protocol</code></p> <p>The PDM fixture callable signature</p>"},{"location":"dev/fixtures/#pdm.pytest.PDMCallable.__call__","title":"<code>__call__(args, strict=False, input=None, obj=None, env=None, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>args</code> <code>str | list[str]</code> <p>the command arguments as a single lexable string or a strings array</p> required <code>strict</code> <code>bool</code> <p>raise an exception on failure instead of returning if enabled</p> <code>False</code> <code>input</code> <code>str | None</code> <p>an optional string to be submitted too <code>stdin</code></p> <code>None</code> <code>obj</code> <code>Project | None</code> <p>an optional existing <code>Project</code>.</p> <code>None</code> <code>env</code> <code>Mapping[str, str] | None</code> <p>override the environment variables with those</p> <code>None</code> <p>Returns:</p> Type Description <code>RunResult</code> <p>The command result</p>"},{"location":"dev/fixtures/#pdm.pytest.RunResult","title":"<code>RunResult</code>  <code>dataclass</code>","text":"<p>Store a command execution result.</p>"},{"location":"dev/fixtures/#pdm.pytest.RunResult.exception","title":"<code>exception: Exception | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If set, the exception raised on execution</p>"},{"location":"dev/fixtures/#pdm.pytest.RunResult.exit_code","title":"<code>exit_code: int</code>  <code>instance-attribute</code>","text":"<p>The execution exit code</p>"},{"location":"dev/fixtures/#pdm.pytest.RunResult.output","title":"<code>output: str</code>  <code>property</code>","text":"<p>The execution <code>stdout</code> output (<code>stdout</code> alias)</p>"},{"location":"dev/fixtures/#pdm.pytest.RunResult.outputs","title":"<code>outputs: str</code>  <code>property</code>","text":"<p>The execution <code>stdout</code> and <code>stderr</code> outputs concatenated</p>"},{"location":"dev/fixtures/#pdm.pytest.RunResult.stderr","title":"<code>stderr: str</code>  <code>instance-attribute</code>","text":"<p>The execution <code>stderr</code> output</p>"},{"location":"dev/fixtures/#pdm.pytest.RunResult.stdout","title":"<code>stdout: str</code>  <code>instance-attribute</code>","text":"<p>The execution <code>stdout</code> output</p>"},{"location":"dev/fixtures/#pdm.pytest.RunResult.print","title":"<code>print()</code>","text":"<p>A debugging facility</p>"},{"location":"dev/fixtures/#pdm.pytest.TestRepository","title":"<code>TestRepository</code>","text":"<p>         Bases: <code>BaseRepository</code></p> <p>A mock repository to ease testing dependencies</p>"},{"location":"dev/fixtures/#pdm.pytest.build_env","title":"<code>build_env(build_env_wheels, tmp_path_factory)</code>","text":"<p>A fixture build environment</p> <p>Parameters:</p> Name Type Description Default <code>build_env_wheels</code> <code>Iterable[Path]</code> <p>a list of wheel to install in the environment</p> required <p>Returns:</p> Type Description <code>Path</code> <p>The build environment temporary path</p>"},{"location":"dev/fixtures/#pdm.pytest.build_env_wheels","title":"<code>build_env_wheels()</code>","text":"<p>Expose some wheels to be installed in the build environment.</p> <p>Override to provide your owns.</p> <p>Returns:</p> Type Description <code>Iterable[Path]</code> <p>a list of wheels paths to install</p>"},{"location":"dev/fixtures/#pdm.pytest.local_finder_artifacts","title":"<code>local_finder_artifacts()</code>","text":"<p>The local finder search path as a fixture</p> <p>Override to provides your own artifacts.</p> <p>Returns:</p> Type Description <code>Path</code> <p>The path to the artifacts root</p>"},{"location":"dev/fixtures/#pdm.pytest.pdm","title":"<code>pdm(core, monkeypatch)</code>","text":"<p>A fixture alloowing to execute PDM commands</p> <p>Returns:</p> Type Description <code>PDMCallable</code> <p>A <code>pdm</code> fixture command.</p>"},{"location":"dev/fixtures/#pdm.pytest.project","title":"<code>project(project_no_init)</code>","text":"<p>A fixture creating an initialized test project for the current test.</p> <p>Returns:</p> Type Description <code>Project</code> <p>The initialized project</p>"},{"location":"dev/fixtures/#pdm.pytest.project_no_init","title":"<code>project_no_init(tmp_path, mocker, core, pdm_session, monkeypatch, build_env)</code>","text":"<p>A fixture creating a non-initialized test project for the current test.</p> <p>Returns:</p> Type Description <code>Project</code> <p>The non-initialized project</p>"},{"location":"dev/fixtures/#pdm.pytest.pypi_indexes","title":"<code>pypi_indexes()</code>","text":"<p>Provides some mocked PyPI entries</p> <p>Returns:</p> Type Description <code>IndexesDefinition</code> <p>a definition of the mocked indexes</p>"},{"location":"dev/fixtures/#pdm.pytest.remove_pep582_path_from_pythonpath","title":"<code>remove_pep582_path_from_pythonpath(pythonpath)</code>","text":"<p>Remove all pep582 paths of PDM from PYTHONPATH</p>"},{"location":"dev/fixtures/#pdm.pytest.repository","title":"<code>repository(project, mocker, repository_pypi_json, local_finder)</code>","text":"<p>A fixture providing a mock PyPI repository</p> <p>Returns:</p> Type Description <code>TestRepository</code> <p>A mock repository</p>"},{"location":"dev/fixtures/#pdm.pytest.repository_pypi_json","title":"<code>repository_pypi_json()</code>","text":"<p>The test repository fake PyPI definition path as a fixture</p> <p>Override to provides your own definition path.</p> <p>Returns:</p> Type Description <code>Path</code> <p>The path to a fake PyPI repository JSON definition</p>"},{"location":"dev/fixtures/#pdm.pytest.venv_backends","title":"<code>venv_backends(project, request)</code>","text":"<p>A fixture iterating over <code>venv</code> backends</p>"},{"location":"dev/fixtures/#pdm.pytest.working_set","title":"<code>working_set(mocker, repository)</code>","text":"<p>a mock working set as a fixture</p> <p>Returns:</p> Type Description <code>MockWorkingSet</code> <p>a mock working set</p>"},{"location":"dev/write/","title":"PDM Plugins","text":"<p>PDM is aiming at being a community driven package manager. It is shipped with a full-featured plug-in system, with which you can:</p> <ul> <li>Develop a new command for PDM</li> <li>Add additional options to existing PDM commands</li> <li>Change PDM's behavior by reading additional config items</li> <li>Control the process of dependency resolution or installation</li> </ul>"},{"location":"dev/write/#what-should-a-plugin-do","title":"What should a plugin do","text":"<p>The core PDM project focuses on dependency management and package publishing. Other functionalities you wish to integrate with PDM are preferred to lie in their own plugins and released as standalone PyPI projects. In case the plugin is considered a good supplement of the core project it may have a chance to be absorbed into PDM.</p>"},{"location":"dev/write/#write-your-own-plugin","title":"Write your own plugin","text":"<p>In the following sections, I will show an example of adding a new command <code>hello</code> which reads the <code>hello.name</code> config.</p>"},{"location":"dev/write/#write-the-command","title":"Write the command","text":"<p>The PDM's CLI module is designed in a way that user can easily \"inherit and modify\". To write a new command:</p> <pre><code>from pdm.cli.commands.base import BaseCommand\n\nclass HelloCommand(BaseCommand):\n\"\"\"Say hello to the specified person.\n    If none is given, will read from \"hello.name\" config.\n    \"\"\"\n\n    def add_arguments(self, parser):\n        parser.add_argument(\"-n\", \"--name\", help=\"the person's name to whom you greet\")\n\n    def handle(self, project, options):\n        if not options.name:\n            name = project.config[\"hello.name\"]\n        else:\n            name = options.name\n        print(f\"Hello, {name}\")\n</code></pre> <p>First, let's create a new <code>HelloCommand</code> class inheriting from <code>pdm.cli.commands.base.BaseCommand</code>. It has two major functions:</p> <ul> <li><code>add_arguments()</code> to manipulate the argument parser passed as the only argument,   where you can add additional command line arguments to it</li> <li><code>handle()</code> to do something when the subcommand is matched, you can do nothing by writing a single <code>pass</code> statement.   It accepts two arguments: an <code>pdm.project.Project</code> object as the first one and the parsed <code>argparse.Namespace</code> object as the second.</li> </ul> <p>The document string will serve as the command help text, which will be shown in <code>pdm --help</code>.</p> <p>Besides, PDM's subcommand has two default options: <code>-v/--verbose</code> to change the verbosity level and <code>-g/--global</code> to enable global project. If you don't want these default options, override the <code>arguments</code> class attribute to a list of <code>pdm.cli.options.Option</code> objects, or assign it to an empty list to have no default options:</p> <pre><code>class HelloCommand(BaseCommand):\n\narguments = []\n</code></pre> <p>Note</p> <p>The default options are loaded first, then <code>add_arguments()</code> is called.</p>"},{"location":"dev/write/#register-the-command-to-the-core-object","title":"Register the command to the core object","text":"<p>Write a function somewhere in your plugin project. There is no limit on what the name of the function is, but the function should take only one argument -- the PDM core object:</p> <pre><code>def hello_plugin(core):\ncore.register_command(HelloCommand, \"hello\")\n</code></pre> <p>Call <code>core.register_command()</code> to register the command. The second argument as the name of the subcommand is optional. PDM will look for the <code>HelloCommand</code>'s <code>name</code> attribute if the name is not passed.</p>"},{"location":"dev/write/#add-a-new-config-item","title":"Add a new config item","text":"<p>Let's recall the first code snippet, <code>hello.name</code> config key is consulted for the name if not passed via the command line.</p> <pre><code>class HelloCommand(BaseCommand):\n\"\"\"Say hello to the specified person.\n    If none is given, will read from \"hello.name\" config.\n    \"\"\"\n\n    def add_arguments(self, parser):\n        parser.add_argument(\"-n\", \"--name\", help=\"the person's name to whom you greet\")\n\n    def handle(self, project, options):\n        if not options.name:\nname = project.config[\"hello.name\"]\nelse:\n            name = options.name\n        print(f\"Hello, {name}\")\n</code></pre> <p>Till now, if you query the config value by <code>pdm config get hello.name</code>, an error will pop up saying it is not a valid config key. You need to register the config item, too:</p> <pre><code>from pdm.project.config import ConfigItem\n\ndef hello_plugin(core):\n    core.register_command(HelloCommand, \"hello\")\ncore.add_config(\"hello.name\", ConfigItem(\"The person's name\", \"John\"))\n</code></pre> <p>where <code>ConfigItem</code> class takes 4 parameters, in the following order:</p> <ul> <li><code>description</code>: a description of the config item</li> <li><code>default</code>: default value of the config item</li> <li><code>global_only</code>: whether the config is allowed to set in home config only</li> <li><code>env_var</code>: the name of environment variable which will be read as the config value</li> </ul>"},{"location":"dev/write/#other-plugin-points","title":"Other plugin points","text":"<p>Besides of commands and configurations, the <code>core</code> object exposes some other methods and attributes to override. PDM also provides some signals you can listen to. Please read the API reference for more details.</p>"},{"location":"dev/write/#tips-about-developing-a-pdm-plugin","title":"Tips about developing a PDM plugin","text":"<p>When developing a plugin, one hopes to activate and plugin in development and get updated when the code changes.</p> <p>You can achieve this by installing the plugin in editable mode. To do this, specify the dependencies in <code>tool.pdm.plugins</code> array:</p> <pre><code>[tool.pdm]\nplugins = [\n\"-e file:///{PROJECT_ROOT}\"\n]\n</code></pre> <p>Then install it with:</p> <pre><code>pdm install --plugins\n</code></pre> <p>After that, all the dependencies are available in a project plugin library, including the plugin itself, in editable mode. That means any change to the codebase will take effect immediately without re-installation. The <code>pdm</code> executable also uses a Python interpreter under the hood, so if you run <code>pdm</code> from inside the plugin project, the plugin in development will be activated automatically, and you can do some testing to see how it works.</p>"},{"location":"dev/write/#testing-your-plugin","title":"Testing your plugin","text":"<p>PDM exposes some pytest fixtures as a plugin in the <code>pdm.pytest</code> module. To benefit from them, you must add <code>pdm[pytest]</code> as a test dependency.</p> <p>To enable them in your test, add <code>pdm.pytest</code> as a plugin. You can do so by in your root <code>conftest.py</code>:</p> conftest.py<pre><code># single plugin\npytest_plugins = \"pytest.plugin\"\n\n# many plugins\npytest_plugins = [\n    ...\n    \"pdm.pytest\",\n    ...\n]\n</code></pre> <p>You can see some usage examples into PDM own tests, especially the conftest.py file for configuration.</p> <p>See the pytest fixtures documentation for more details.</p>"},{"location":"dev/write/#publish-your-plugin","title":"Publish your plugin","text":"<p>Now you have defined your plugin already, let's distribute it to PyPI. PDM's plugins are discovered by entry point types. Create an <code>pdm</code> entry point and point to your plugin callable (yeah, it doesn't need to be a function, any callable object can work):</p> <p>PEP 621:</p> <pre><code># pyproject.toml\n\n[project.entry-points.pdm]\nhello = \"my_plugin:hello_plugin\"\n</code></pre> <p>setuptools:</p> <pre><code># setup.py\n\nsetup(\n    ...\n    entry_points={\"pdm\": [\"hello = my_plugin:hello_plugin\"]}\n    ...\n)\n</code></pre>"},{"location":"dev/write/#activate-the-plugin","title":"Activate the plugin","text":"<p>As plugins are loaded via entry points, they can be activated with no more steps than just installing the plugin. For convenience, PDM provides a <code>plugin</code> command group to manage plugins.</p> <p>Assume your plugin is published as <code>pdm-hello</code>:</p> <pre><code>pdm self add pdm-hello\n</code></pre> <p>Now type <code>pdm --help</code> in the terminal, you will see the new added <code>hello</code> command and use it:</p> <pre><code>$ pdm hello Jack\nHello, Jack\n</code></pre> <p>See more plugin management subcommands by typing <code>pdm self --help</code> in the terminal.</p>"},{"location":"dev/write/#specify-the-plugins-in-project","title":"Specify the plugins in project","text":"<p>To specify the required plugins for a project, you can use the <code>tool.pdm.plugins</code> config in the <code>pyproject.toml</code> file. These dependencies can be installed into a project plugin library by running <code>pdm install --plugins</code>. The project plugin library will be loaded in subsequent PDM commands.</p> <p>This is useful when you want to share the same plugin set with the contributors.</p> <pre><code># pyproject.toml\n[tool.pdm]\nplugins = [\n\"pdm-packer\"\n]\n</code></pre> <p>Run <code>pdm install --plugins</code> to install and activate the plugins.</p> <p>Alternatively, you can have project-local plugins that are not published to PyPI, by using editable local dependencies:</p> <pre><code># pyproject.toml\n[tool.pdm]\nplugins = [\n\"-e file:///${PROJECT_ROOT}/plugins/my_plugin\"\n]\n</code></pre>"},{"location":"reference/api/","title":"API Reference","text":""},{"location":"reference/api/#pdm.core.Core","title":"<code>pdm.core.Core</code>","text":"<p>A high level object that manages all classes and configurations</p>"},{"location":"reference/api/#pdm.core.Core.add_config","title":"<code>add_config(name, config_item)</code>  <code>staticmethod</code>","text":"<p>Add a config item to the configuration class.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the config item</p> required <code>config_item</code> <code>pdm.project.config.ConfigItem</code> <p>The config item to add</p> required"},{"location":"reference/api/#pdm.core.Core.create_project","title":"<code>create_project(root_path=None, is_global=False, global_config=None)</code>","text":"<p>Create a new project object</p> <p>Parameters:</p> Name Type Description Default <code>root_path</code> <code>PathLike</code> <p>The path to the project root directory</p> <code>None</code> <code>is_global</code> <code>bool</code> <p>Whether the project is a global project</p> <code>False</code> <code>global_config</code> <code>str</code> <p>The path to the global config file</p> <code>None</code> <p>Returns:</p> Type Description <code>Project</code> <p>The project object</p>"},{"location":"reference/api/#pdm.core.Core.handle","title":"<code>handle(project, options)</code>","text":"<p>Called before command invocation</p>"},{"location":"reference/api/#pdm.core.Core.load_plugins","title":"<code>load_plugins()</code>","text":"<p>Import and load plugins under <code>pdm.plugin</code> namespace A plugin is a callable that accepts the core object as the only argument.</p> Example <pre><code>def my_plugin(core: pdm.core.Core) -&gt; None:\n    ...\n</code></pre>"},{"location":"reference/api/#pdm.core.Core.main","title":"<code>main(args=None, prog_name=None, obj=None, **extra)</code>","text":"<p>The main entry function</p>"},{"location":"reference/api/#pdm.core.Core.register_command","title":"<code>register_command(command, name=None)</code>","text":"<p>Register a subcommand to the subparsers, with an optional name of the subcommand.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>Type[pdm.cli.commands.base.BaseCommand]</code> <p>The command class to register</p> required <code>name</code> <code>str</code> <p>The name of the subcommand, if not given, <code>command.name</code> is used</p> <code>None</code>"},{"location":"reference/api/#pdm.core.Project","title":"<code>pdm.core.Project</code>","text":"<p>Core project class.</p> <p>Parameters:</p> Name Type Description Default <code>core</code> <code>Core</code> <p>The core instance.</p> required <code>root_path</code> <code>str | Path | None</code> <p>The root path of the project.</p> required <code>is_global</code> <code>bool</code> <p>Whether the project is global.</p> <code>False</code> <code>global_config</code> <code>str | Path | None</code> <p>The path to the global config file.</p> <code>None</code>"},{"location":"reference/api/#pdm.project.core.Project.default_source","title":"<code>default_source: RepositoryConfig</code>  <code>property</code>","text":"<p>Get the default source from the pypi setting</p>"},{"location":"reference/api/#pdm.project.core.Project.config","title":"<code>config()</code>","text":"<p>A read-only dict configuration</p>"},{"location":"reference/api/#pdm.project.core.Project.find_interpreters","title":"<code>find_interpreters(python_spec=None)</code>","text":"<p>Return an iterable of interpreter paths that matches the given specifier,</p> which can be <ol> <li>a version specifier like 3.7</li> <li>an absolute path</li> <li>a short name like python3</li> <li>None that returns all possible interpreters</li> </ol>"},{"location":"reference/api/#pdm.project.core.Project.get_provider","title":"<code>get_provider(strategy='all', tracked_names=None, for_install=False, ignore_compatibility=True)</code>","text":"<p>Build a provider class for resolver.</p> <p>:param strategy: the resolve strategy :param tracked_names: the names of packages that needs to update :param for_install: if the provider is for install :returns: The provider object</p>"},{"location":"reference/api/#pdm.project.core.Project.get_pyproject_dependencies","title":"<code>get_pyproject_dependencies(group, dev=False)</code>","text":"<p>Get the dependencies array in the pyproject.toml Return a tuple of two elements, the first is the dependencies array, and the second tells whether it is a dev-dependencies group.</p>"},{"location":"reference/api/#pdm.project.core.Project.get_reporter","title":"<code>get_reporter(requirements, tracked_names=None, spinner=None)</code>","text":"<p>Return the reporter object to construct a resolver.</p> <p>:param requirements: requirements to resolve :param tracked_names: the names of packages that needs to update :param spinner: optional spinner object :returns: a reporter</p>"},{"location":"reference/api/#pdm.project.core.Project.get_repository","title":"<code>get_repository(cls=None, ignore_compatibility=True)</code>","text":"<p>Get the repository object</p>"},{"location":"reference/api/#pdm.project.core.Project.project_config","title":"<code>project_config()</code>","text":"<p>Read-and-writable configuration dict for project settings</p>"},{"location":"reference/api/#pdm.project.core.Project.resolve_interpreter","title":"<code>resolve_interpreter()</code>","text":"<p>Get the Python interpreter path.</p>"},{"location":"reference/api/#pdm.project.core.Project.write_lockfile","title":"<code>write_lockfile(toml_data, show_message=True, write=True, groups=None, cross_platform=None)</code>","text":"<p>Write the lock file to disk.</p>"},{"location":"reference/api/#signals","title":"Signals","text":"<p>New in version 1.12.0</p> <p>The signal definition for PDM.</p> Example <pre><code>from pdm.signals import post_init, post_install\n\ndef on_post_init(project):\n    project.core.ui.echo(\"Project initialized\")\n# Connect to the signal\npost_init.connect(on_post_init)\n# Or use as a decorator\n@post_install.connect\ndef on_post_install(project, candidates, dry_run):\n    project.core.ui.echo(\"Project install succeeded\")\n</code></pre>"},{"location":"reference/api/#pdm.signals.post_build","title":"<code>post_build: NamedSignal = pdm_signals.signal('post_build')</code>  <code>module-attribute</code>","text":"<p>Called after a project is built.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required <code>artifacts</code> <code>Sequence[str]</code> <p>The locations of built artifacts</p> required <code>config_settings</code> <code>dict[str, str] | None</code> <p>Additional config settings passed via args</p> required"},{"location":"reference/api/#pdm.signals.post_init","title":"<code>post_init: NamedSignal = pdm_signals.signal('post_init')</code>  <code>module-attribute</code>","text":"<p>Called after a project is initialized.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required"},{"location":"reference/api/#pdm.signals.post_install","title":"<code>post_install: NamedSignal = pdm_signals.signal('post_install')</code>  <code>module-attribute</code>","text":"<p>Called after a project is installed.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required <code>candidates</code> <code>dict[str, Candidate]</code> <p>The candidates installed</p> required <code>dry_run</code> <code>bool</code> <p>If true, won't perform any actions</p> required"},{"location":"reference/api/#pdm.signals.post_lock","title":"<code>post_lock: NamedSignal = pdm_signals.signal('post_lock')</code>  <code>module-attribute</code>","text":"<p>Called after a project is locked.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required <code>resolution</code> <code>dict[str, Candidate]</code> <p>The resolved candidates</p> required <code>dry_run</code> <code>bool</code> <p>If true, won't perform any actions</p> required"},{"location":"reference/api/#pdm.signals.post_publish","title":"<code>post_publish: NamedSignal = pdm_signals.signal('post_publish')</code>  <code>module-attribute</code>","text":"<p>Called after a project is published.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required"},{"location":"reference/api/#pdm.signals.post_run","title":"<code>post_run: NamedSignal = pdm_signals.signal('post_run')</code>  <code>module-attribute</code>","text":"<p>Called after any run.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required <code>script</code> <code>str</code> <p>the script name</p> required <code>args</code> <code>Sequence[str]</code> <p>the command line provided arguments</p> required"},{"location":"reference/api/#pdm.signals.post_script","title":"<code>post_script: NamedSignal = pdm_signals.signal('post_script')</code>  <code>module-attribute</code>","text":"<p>Called after any script.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required <code>script</code> <code>str</code> <p>the script name</p> required <code>args</code> <code>Sequence[str]</code> <p>the command line provided arguments</p> required"},{"location":"reference/api/#pdm.signals.post_use","title":"<code>post_use: NamedSignal = pdm_signals.signal('post_use')</code>  <code>module-attribute</code>","text":"<p>Called after use switched to a new Python version.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required <code>python</code> <code>PythonInfo</code> <p>Information about the new Python interpreter</p> required"},{"location":"reference/api/#pdm.signals.pre_build","title":"<code>pre_build: NamedSignal = pdm_signals.signal('pre_build')</code>  <code>module-attribute</code>","text":"<p>Called before a project is built.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required <code>dest</code> <code>str</code> <p>The destination location</p> required <code>config_settings</code> <code>dict[str, str] | None</code> <p>Additional config settings passed via args</p> required"},{"location":"reference/api/#pdm.signals.pre_install","title":"<code>pre_install: NamedSignal = pdm_signals.signal('pre_install')</code>  <code>module-attribute</code>","text":"<p>Called before a project is installed.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required <code>candidates</code> <code>dict[str, Candidate]</code> <p>The candidates to install</p> required <code>dry_run</code> <code>bool</code> <p>If true, won't perform any actions</p> required"},{"location":"reference/api/#pdm.signals.pre_invoke","title":"<code>pre_invoke: NamedSignal = pdm_signals.signal('pre_invoke')</code>  <code>module-attribute</code>","text":"<p>Called before any command is invoked.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required <code>command</code> <code>str | None</code> <p>the command name</p> required <code>options</code> <code>Namespace</code> <p>the parsed arguments</p> required"},{"location":"reference/api/#pdm.signals.pre_lock","title":"<code>pre_lock: NamedSignal = pdm_signals.signal('pre_lock')</code>  <code>module-attribute</code>","text":"<p>Called before a project is locked.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required <code>requirements</code> <code>list[Requirement]</code> <p>The requirements to lock</p> required <code>dry_run</code> <code>bool</code> <p>If true, won't perform any actions</p> required"},{"location":"reference/api/#pdm.signals.pre_publish","title":"<code>pre_publish: NamedSignal = pdm_signals.signal('pre_publish')</code>  <code>module-attribute</code>","text":"<p>Called before a project is published.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required"},{"location":"reference/api/#pdm.signals.pre_run","title":"<code>pre_run: NamedSignal = pdm_signals.signal('pre_run')</code>  <code>module-attribute</code>","text":"<p>Called before any run.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required <code>script</code> <code>str</code> <p>the script name</p> required <code>args</code> <code>Sequence[str]</code> <p>the command line provided arguments</p> required"},{"location":"reference/api/#pdm.signals.pre_script","title":"<code>pre_script: NamedSignal = pdm_signals.signal('pre_script')</code>  <code>module-attribute</code>","text":"<p>Called before any script.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project object</p> required <code>script</code> <code>str</code> <p>the script name</p> required <code>args</code> <code>Sequence[str]</code> <p>the command line provided arguments</p> required"},{"location":"reference/build/","title":"Build Configuration","text":"<p><code>pdm</code> uses the PEP 517 to build the package. It acts as a build frontend that calls the build backend to build the package.</p> <p>A build backend is what drives the build system to build source distributions and wheels from arbitrary source trees.</p> <p>If you run <code>pdm init</code>, PDM will let you choose the build backend to use. Unlike other package managers, PDM does not force you to use a specific build backend. You can choose the one you like. Here is a list of build backends and corresponding configurations initially supported by PDM:</p> pdm-backendsetuptoolsflithatchlingpdm-pep517(deprecated) <p><code>pyproject.toml</code> configuration:</p> <pre><code>[build-system]\nrequires = [\"pdm-backend\"]\nbuild-backend = \"pdm.backend\"\n</code></pre> <p> Read the docs</p> <p><code>pyproject.toml</code> configuration:</p> <pre><code>[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n</code></pre> <p> Read the docs</p> <p><code>pyproject.toml</code> configuration:</p> <pre><code>[build-system]\nrequires = [\"flit_core &gt;=3.2,&lt;4\"]\nbuild-backend = \"flit_core.buildapi\"\n</code></pre> <p> Read the docs</p> <p><code>pyproject.toml</code> configuration:</p> <pre><code>[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n</code></pre> <p> Read the docs</p> <p>This backend is deprecated, please migrate to <code>pdm-backend</code>.</p> <p><code>pyproject.toml</code> configuration:</p> <pre><code>[build-system]\nrequires = [\"pdm-pep517\"]\nbuild-backend = \"pdm.pep517.api\"\n</code></pre> <p> Read the docs</p> <p>Apart from the above mentioned backends, you can also use any other backend that supports PEP 621, however, poetry-core is not supported because it does not support reading PEP 621 metadata.</p> <p>Info</p> <p>If you are using a custom build backend that is not in the above list, PDM will handle the relative paths as PDM-style(<code>${PROJECT_ROOT}</code> variable).</p>"},{"location":"reference/cli/","title":"CLI Reference","text":""},{"location":"reference/cli/#pdm","title":"pdm","text":"<p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-V</code>, <code>--version</code>: Show the version and exit</li> <li><code>-c</code>, <code>--config</code>: Specify another config file path [env var: <code>PDM_CONFIG_FILE</code>] </li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-I</code>, <code>--ignore-python</code>: Ignore the Python path saved in<code>.pdm-python</code>. [env var: <code>PDM_IGNORE_SAVED_PYTHON</code>]</li> <li><code>--pep582</code> <code>SHELL</code>: Print the command line to be eval'd by the shell</li> </ul> <p>Commands:</p>"},{"location":"reference/cli/#add","title":"add","text":"<p>Add package(s) to pyproject.toml and install them</p> <p>Package Arguments:</p> <ul> <li><code>-e</code>, <code>--editable</code>: Specify editable packages</li> <li><code>packages</code>: Specify packages</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>-L</code>, <code>--lockfile</code>: Specify another lockfile path. Default:<code>pdm.lock</code>. [env var: <code>PDM_LOCKFILE</code>]</li> <li><code>--save-compatible</code>: Save compatible version specifiers</li> <li><code>--save-wildcard</code>: Save wildcard version specifiers</li> <li><code>--save-exact</code>: Save exact version specifiers</li> <li><code>--save-minimum</code>: Save minimum version specifiers</li> <li><code>--update-reuse</code>: Reuse pinned versions already present in lock file if possible</li> <li><code>--update-eager</code>: Try to update the packages and their dependencies recursively</li> <li><code>--update-all</code>: Update all dependencies and sub-dependencies</li> <li><code>--pre</code>, <code>--prerelease</code>: Allow prereleases to be pinned</li> <li><code>-u</code>, <code>--unconstrained</code>: Ignore the version constraint of packages</li> <li><code>--dry-run</code>: Show the difference only and don't perform any action</li> <li><code>--venv</code> <code>NAME</code>: Run the command in the virtual environment with the given key. [env var: <code>PDM_IN_VENV</code>]</li> <li><code>-k</code>, <code>--skip</code>: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use<code>:all</code> to skip all hooks. Use<code>:pre</code> and<code>:post</code> to skip all pre or post hooks.</li> <li><code>-d</code>, <code>--dev</code>: Add packages into dev dependencies</li> <li><code>-G</code>, <code>--group</code>: Specify the target dependency group to add into</li> <li><code>--no-sync</code>: Only write<code>pyproject.toml</code> and do not sync the working set (default: <code>True</code>)</li> </ul> <p>Install Options:</p> <ul> <li><code>--no-editable</code>: Install non-editable versions for all packages</li> <li><code>--no-self</code>: Don't install the project itself. [env var: <code>PDM_NO_SELF</code>]</li> <li><code>--fail-fast</code>, <code>-x</code>: Abort on first installation error</li> <li><code>--no-isolation</code>: Do not isolate the build in a clean environment</li> </ul>"},{"location":"reference/cli/#build","title":"build","text":"<p>Build artifacts for distribution</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>--no-isolation</code>: Do not isolate the build in a clean environment</li> <li><code>-k</code>, <code>--skip</code>: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use<code>:all</code> to skip all hooks. Use<code>:pre</code> and<code>:post</code> to skip all pre or post hooks.</li> <li><code>--no-sdist</code>: Don't build source tarballs (default: <code>True</code>)</li> <li><code>--no-wheel</code>: Don't build wheels (default: <code>True</code>)</li> <li><code>-d</code>, <code>--dest</code>: Target directory to put artifacts (default: <code>dist</code>)</li> <li><code>--no-clean</code>: Do not clean the target directory (default: <code>True</code>)</li> <li><code>--config-setting</code>, <code>-C</code>: Pass options to the backend. options with a value must be specified after \"=\": <code>--config-setting=--opt(=value)</code> or <code>-C--opt(=value)</code></li> </ul>"},{"location":"reference/cli/#cache","title":"cache","text":"<p>Control the caches of PDM</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> </ul> <p>Commands:</p>"},{"location":"reference/cli/#clear","title":"clear","text":"<p>Clean all the files under cache directory</p> <p>Positional Arguments:</p> <ul> <li><code>type</code>: Clear the given type of caches</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> </ul>"},{"location":"reference/cli/#remove","title":"remove","text":"<p>Remove files matching the given pattern</p> <p>Positional Arguments:</p> <ul> <li><code>pattern</code>: The pattern to remove</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> </ul>"},{"location":"reference/cli/#list","title":"list","text":"<p>List the built wheels stored in the cache</p> <p>Positional Arguments:</p> <ul> <li><code>pattern</code>: The pattern to list (default: <code>*</code>)</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> </ul>"},{"location":"reference/cli/#info","title":"info","text":"<p>Show the info and current size of caches</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> </ul>"},{"location":"reference/cli/#completion","title":"completion","text":"<p>Generate completion scripts for the given shell</p> <p>Positional Arguments:</p> <ul> <li><code>shell</code>: The shell to generate the scripts for. If not given, PDM will properly guess from <code>SHELL</code> env var.</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> </ul>"},{"location":"reference/cli/#config","title":"config","text":"<p>Display the current configuration</p> <p>Positional Arguments:</p> <ul> <li><code>key</code>: Config key</li> <li><code>value</code>: Config value</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>-l</code>, <code>--local</code>: Set config in the project's local configuration file</li> <li><code>-d</code>, <code>--delete</code>: Unset a configuration key</li> </ul>"},{"location":"reference/cli/#export","title":"export","text":"<p>Export the locked packages set to other formats</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>-L</code>, <code>--lockfile</code>: Specify another lockfile path. Default:<code>pdm.lock</code>. [env var: <code>PDM_LOCKFILE</code>]</li> <li><code>-f</code>, <code>--format</code>: Specify the export file format (default: <code>requirements</code>)</li> <li><code>--without-hashes</code>: Don't include artifact hashes (default: <code>True</code>)</li> <li><code>-o</code>, <code>--output</code>: Write output to the given file, or print to stdout if not given</li> <li><code>--pyproject</code>: Read the list of packages from<code>pyproject.toml</code></li> </ul> <p>Dependencies Selection:</p> <ul> <li><code>-G</code>, <code>--group</code> <code>GROUP</code>: Select group of optional-dependencies separated by comma or dev-dependencies (with <code>-d</code>). Can be supplied multiple times, use<code>:all</code> to include all groups under the same species.</li> <li><code>--no-default</code>: Don't include dependencies from the default group (default: <code>True</code>)</li> <li><code>-d</code>, <code>--dev</code>: Select dev dependencies</li> <li><code>--prod</code>, <code>--production</code>: Unselect dev dependencies (default: <code>True</code>)</li> </ul>"},{"location":"reference/cli/#fix","title":"fix","text":"<p>Fix the project problems according to the latest version of PDM</p> <p>Positional Arguments:</p> <ul> <li><code>problem</code>: Fix the specific problem, or all if not given</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>--dry-run</code>: Only show the problems</li> </ul>"},{"location":"reference/cli/#import","title":"import","text":"<p>Import project metadata from other formats</p> <p>Positional Arguments:</p> <ul> <li><code>filename</code>: The file name</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>-d</code>, <code>--dev</code>: import packages into dev dependencies</li> <li><code>-G</code>, <code>--group</code>: Specify the target dependency group to import into</li> <li><code>-f</code>, <code>--format</code>: Specify the file format explicitly</li> </ul>"},{"location":"reference/cli/#info_1","title":"info","text":"<p>Show the project information</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>--venv</code> <code>NAME</code>: Run the command in the virtual environment with the given key. [env var: <code>PDM_IN_VENV</code>]</li> <li><code>--python</code>: Show the interpreter path</li> <li><code>--where</code>: Show the project root path</li> <li><code>--packages</code>: Show the local packages root</li> <li><code>--env</code>: Show PEP 508 environment markers</li> <li><code>--json</code>: Dump the information in JSON</li> </ul>"},{"location":"reference/cli/#init","title":"init","text":"<p>Initialize a pyproject.toml for PDM</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>-k</code>, <code>--skip</code>: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use<code>:all</code> to skip all hooks. Use<code>:pre</code> and<code>:post</code> to skip all pre or post hooks.</li> <li><code>-n</code>, <code>--non-interactive</code>: Don't ask questions but use default values</li> <li><code>--python</code>: Specify the Python version/path to use</li> <li><code>--backend</code>: Specify the build backend</li> <li><code>--lib</code>: Create a library project</li> </ul>"},{"location":"reference/cli/#install","title":"install","text":"<p>Install dependencies from lock file</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>--dry-run</code>: Show the difference only and don't perform any action</li> <li><code>-L</code>, <code>--lockfile</code>: Specify another lockfile path. Default:<code>pdm.lock</code>. [env var: <code>PDM_LOCKFILE</code>]</li> <li><code>-k</code>, <code>--skip</code>: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use<code>:all</code> to skip all hooks. Use<code>:pre</code> and<code>:post</code> to skip all pre or post hooks.</li> <li><code>--venv</code> <code>NAME</code>: Run the command in the virtual environment with the given key. [env var: <code>PDM_IN_VENV</code>]</li> <li><code>--no-lock</code>: Don't do lock if the lock file is not found or outdated (default: <code>True</code>)</li> <li><code>--check</code>: Check if the lock file is up to date and fail otherwise</li> <li><code>--plugins</code>: Install the plugins specified in<code>pyproject.toml</code></li> </ul> <p>Install Options:</p> <ul> <li><code>--no-editable</code>: Install non-editable versions for all packages</li> <li><code>--no-self</code>: Don't install the project itself. [env var: <code>PDM_NO_SELF</code>]</li> <li><code>--fail-fast</code>, <code>-x</code>: Abort on first installation error</li> <li><code>--no-isolation</code>: Do not isolate the build in a clean environment</li> </ul> <p>Dependencies Selection:</p> <ul> <li><code>-G</code>, <code>--group</code> <code>GROUP</code>: Select group of optional-dependencies separated by comma or dev-dependencies (with <code>-d</code>). Can be supplied multiple times, use<code>:all</code> to include all groups under the same species.</li> <li><code>--no-default</code>: Don't include dependencies from the default group (default: <code>True</code>)</li> <li><code>-d</code>, <code>--dev</code>: Select dev dependencies</li> <li><code>--prod</code>, <code>--production</code>: Unselect dev dependencies (default: <code>True</code>)</li> </ul>"},{"location":"reference/cli/#list_1","title":"list","text":"<p>List packages installed in the current working set</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>--venv</code> <code>NAME</code>: Run the command in the virtual environment with the given key. [env var: <code>PDM_IN_VENV</code>]</li> <li><code>--freeze</code>: Show the installed dependencies in pip's requirements.txt format</li> <li><code>--graph</code>: Display a graph of dependencies</li> <li><code>-r</code>, <code>--reverse</code>: Reverse the dependency graph</li> <li><code>--resolve</code>: Resolve all requirements to output licenses (instead of just showing those currently installed)</li> <li><code>--fields</code>: Select information to output as a comma separated string. For example: name,version,homepage,licenses,groups. (default: <code>name,version,location</code>)</li> <li><code>--sort</code>: Sort the output using a given field name. If nothing is set, no sort is applied. Multiple fields can be combined with ','.</li> <li><code>--csv</code>: Output dependencies in CSV document format</li> <li><code>--json</code>: Output dependencies in JSON document format</li> <li><code>--markdown</code>: Output dependencies and legal notices in markdown document format - best effort basis</li> <li><code>--include</code>: Dependency groups to include in the output. By default all are included</li> <li><code>--exclude</code>: Exclude dependency groups from the output</li> </ul>"},{"location":"reference/cli/#lock","title":"lock","text":"<p>Resolve and lock dependencies</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>-L</code>, <code>--lockfile</code>: Specify another lockfile path. Default:<code>pdm.lock</code>. [env var: <code>PDM_LOCKFILE</code>]</li> <li><code>--no-isolation</code>: Do not isolate the build in a clean environment</li> <li><code>-k</code>, <code>--skip</code>: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use<code>:all</code> to skip all hooks. Use<code>:pre</code> and<code>:post</code> to skip all pre or post hooks.</li> <li><code>--refresh</code>: Don't update pinned versions, only refresh the lock file</li> <li><code>--check</code>: Check if the lock file is up to date and quit</li> <li><code>--no-cross-platform</code>: Only lock packages for the current platform (default: <code>True</code>)</li> </ul> <p>Dependencies Selection:</p> <ul> <li><code>-G</code>, <code>--group</code> <code>GROUP</code>: Select group of optional-dependencies separated by comma or dev-dependencies (with <code>-d</code>). Can be supplied multiple times, use<code>:all</code> to include all groups under the same species.</li> <li><code>--no-default</code>: Don't include dependencies from the default group (default: <code>True</code>)</li> <li><code>-d</code>, <code>--dev</code>: Select dev dependencies</li> <li><code>--prod</code>, <code>--production</code>: Unselect dev dependencies (default: <code>True</code>)</li> </ul>"},{"location":"reference/cli/#publish","title":"publish","text":"<p>Build and publish the project to PyPI</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>-k</code>, <code>--skip</code>: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use<code>:all</code> to skip all hooks. Use<code>:pre</code> and<code>:post</code> to skip all pre or post hooks.</li> <li><code>-r</code>, <code>--repository</code>: The repository name or url to publish the package to [env var: <code>PDM_PUBLISH_REPO</code>]</li> <li><code>-u</code>, <code>--username</code>: The username to access the repository [env var: <code>PDM_PUBLISH_USERNAME</code>]</li> <li><code>-P</code>, <code>--password</code>: The password to access the repository [env var: <code>PDM_PUBLISH_PASSWORD</code>]</li> <li><code>-S</code>, <code>--sign</code>: Upload the package with PGP signature</li> <li><code>-i</code>, <code>--identity</code>: GPG identity used to sign files.</li> <li><code>-c</code>, <code>--comment</code>: The comment to include with the distribution file.</li> <li><code>--no-build</code>: Don't build the package before publishing (default: <code>True</code>)</li> <li><code>--no-very-ssl</code>: Disable SSL verification</li> <li><code>--ca-certs</code>: The path to a PEM-encoded Certificate Authority bundle to use for publish server validation [env var: <code>PDM_PUBLISH_CA_CERTS</code>]</li> </ul>"},{"location":"reference/cli/#remove_1","title":"remove","text":"<p>Remove packages from pyproject.toml</p> <p>Positional Arguments:</p> <ul> <li><code>packages</code>: Specify the packages to remove</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>--dry-run</code>: Show the difference only and don't perform any action</li> <li><code>-L</code>, <code>--lockfile</code>: Specify another lockfile path. Default:<code>pdm.lock</code>. [env var: <code>PDM_LOCKFILE</code>]</li> <li><code>-k</code>, <code>--skip</code>: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use<code>:all</code> to skip all hooks. Use<code>:pre</code> and<code>:post</code> to skip all pre or post hooks.</li> <li><code>--venv</code> <code>NAME</code>: Run the command in the virtual environment with the given key. [env var: <code>PDM_IN_VENV</code>]</li> <li><code>-d</code>, <code>--dev</code>: Remove packages from dev dependencies</li> <li><code>-G</code>, <code>--group</code>: Specify the target dependency group to remove from</li> <li><code>--no-sync</code>: Only write<code>pyproject.toml</code> and do not uninstall packages (default: <code>True</code>)</li> </ul> <p>Install Options:</p> <ul> <li><code>--no-editable</code>: Install non-editable versions for all packages</li> <li><code>--no-self</code>: Don't install the project itself. [env var: <code>PDM_NO_SELF</code>]</li> <li><code>--fail-fast</code>, <code>-x</code>: Abort on first installation error</li> <li><code>--no-isolation</code>: Do not isolate the build in a clean environment</li> </ul>"},{"location":"reference/cli/#run","title":"run","text":"<p>Run commands or scripts with local packages loaded</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>-k</code>, <code>--skip</code>: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use<code>:all</code> to skip all hooks. Use<code>:pre</code> and<code>:post</code> to skip all pre or post hooks.</li> <li><code>--venv</code> <code>NAME</code>: Run the command in the virtual environment with the given key. [env var: <code>PDM_IN_VENV</code>]</li> <li><code>-l</code>, <code>--list</code>: Show all available scripts defined in<code>pyproject.toml</code></li> <li><code>-j</code>, <code>--json</code>: Output all scripts infos in JSON</li> </ul> <p>Execution Parameters:</p> <ul> <li><code>-s</code>, <code>--site-packages</code>: Load site-packages from the selected interpreter</li> <li><code>script</code>: The command to run</li> <li><code>args</code>: Arguments that will be passed to the command</li> </ul>"},{"location":"reference/cli/#search","title":"search","text":"<p>Search for PyPI packages</p> <p>Positional Arguments:</p> <ul> <li><code>query</code>: Query string to search</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> </ul>"},{"location":"reference/cli/#self","title":"self","text":"<p>Manage the PDM program itself (previously known as plugin)</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> </ul> <p>Commands:</p>"},{"location":"reference/cli/#list_2","title":"list","text":"<p>List all packages installed with PDM</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>--plugins</code>: List plugins only</li> </ul>"},{"location":"reference/cli/#add_1","title":"add","text":"<p>Install packages to the PDM's environment</p> <p>Positional Arguments:</p> <ul> <li><code>packages</code>: Specify one or many package names, each package can have a version specifier</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>--pip-args</code>: Arguments that will be passed to pip install</li> </ul>"},{"location":"reference/cli/#remove_2","title":"remove","text":"<p>Remove packages from PDM's environment</p> <p>Positional Arguments:</p> <ul> <li><code>packages</code>: Specify one or many package names</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>--pip-args</code>: Arguments that will be passed to pip uninstall</li> <li><code>-y</code>, <code>--yes</code>: Answer yes on the question</li> </ul>"},{"location":"reference/cli/#update","title":"update","text":"<p>Update PDM itself</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>--head</code>: Update to the latest commit on the main branch</li> <li><code>--pre</code>: Update to the latest prerelease version</li> <li><code>--pip-args</code>: Additional arguments that will be passed to pip install</li> </ul>"},{"location":"reference/cli/#plugin","title":"plugin","text":"<p>Manage the PDM program itself (previously known as plugin)</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> </ul> <p>Commands:</p>"},{"location":"reference/cli/#list_3","title":"list","text":"<p>List all packages installed with PDM</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>--plugins</code>: List plugins only</li> </ul>"},{"location":"reference/cli/#add_2","title":"add","text":"<p>Install packages to the PDM's environment</p> <p>Positional Arguments:</p> <ul> <li><code>packages</code>: Specify one or many package names, each package can have a version specifier</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>--pip-args</code>: Arguments that will be passed to pip install</li> </ul>"},{"location":"reference/cli/#remove_3","title":"remove","text":"<p>Remove packages from PDM's environment</p> <p>Positional Arguments:</p> <ul> <li><code>packages</code>: Specify one or many package names</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>--pip-args</code>: Arguments that will be passed to pip uninstall</li> <li><code>-y</code>, <code>--yes</code>: Answer yes on the question</li> </ul>"},{"location":"reference/cli/#update_1","title":"update","text":"<p>Update PDM itself</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>--head</code>: Update to the latest commit on the main branch</li> <li><code>--pre</code>: Update to the latest prerelease version</li> <li><code>--pip-args</code>: Additional arguments that will be passed to pip install</li> </ul>"},{"location":"reference/cli/#show","title":"show","text":"<p>Show the package information</p> <p>Positional Arguments:</p> <ul> <li><code>package</code>: Specify the package name, or show this package if not given</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>--venv</code> <code>NAME</code>: Run the command in the virtual environment with the given key. [env var: <code>PDM_IN_VENV</code>]</li> <li><code>--name</code>: Show name</li> <li><code>--version</code>: Show version</li> <li><code>--summary</code>: Show summary</li> <li><code>--license</code>: Show license</li> <li><code>--platform</code>: Show platform</li> <li><code>--keywords</code>: Show keywords</li> </ul>"},{"location":"reference/cli/#sync","title":"sync","text":"<p>Synchronize the current working set with lock file</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>--dry-run</code>: Show the difference only and don't perform any action</li> <li><code>-L</code>, <code>--lockfile</code>: Specify another lockfile path. Default:<code>pdm.lock</code>. [env var: <code>PDM_LOCKFILE</code>]</li> <li><code>-k</code>, <code>--skip</code>: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use<code>:all</code> to skip all hooks. Use<code>:pre</code> and<code>:post</code> to skip all pre or post hooks.</li> <li><code>--clean</code>: Clean packages not in the lockfile</li> <li><code>--only-keep</code>: Only keep the selected packages</li> <li><code>--venv</code> <code>NAME</code>: Run the command in the virtual environment with the given key. [env var: <code>PDM_IN_VENV</code>]</li> <li><code>-r</code>, <code>--reinstall</code>: Force reinstall existing dependencies</li> </ul> <p>Install Options:</p> <ul> <li><code>--no-editable</code>: Install non-editable versions for all packages</li> <li><code>--no-self</code>: Don't install the project itself. [env var: <code>PDM_NO_SELF</code>]</li> <li><code>--fail-fast</code>, <code>-x</code>: Abort on first installation error</li> <li><code>--no-isolation</code>: Do not isolate the build in a clean environment</li> </ul> <p>Dependencies Selection:</p> <ul> <li><code>-G</code>, <code>--group</code> <code>GROUP</code>: Select group of optional-dependencies separated by comma or dev-dependencies (with <code>-d</code>). Can be supplied multiple times, use<code>:all</code> to include all groups under the same species.</li> <li><code>--no-default</code>: Don't include dependencies from the default group (default: <code>True</code>)</li> <li><code>-d</code>, <code>--dev</code>: Select dev dependencies</li> <li><code>--prod</code>, <code>--production</code>: Unselect dev dependencies (default: <code>True</code>)</li> </ul>"},{"location":"reference/cli/#update_2","title":"update","text":"<p>Update package(s) in pyproject.toml</p> <p>Positional Arguments:</p> <ul> <li><code>packages</code>: If packages are given, only update them</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>-L</code>, <code>--lockfile</code>: Specify another lockfile path. Default:<code>pdm.lock</code>. [env var: <code>PDM_LOCKFILE</code>]</li> <li><code>--save-compatible</code>: Save compatible version specifiers</li> <li><code>--save-wildcard</code>: Save wildcard version specifiers</li> <li><code>--save-exact</code>: Save exact version specifiers</li> <li><code>--save-minimum</code>: Save minimum version specifiers</li> <li><code>--update-reuse</code>: Reuse pinned versions already present in lock file if possible</li> <li><code>--update-eager</code>: Try to update the packages and their dependencies recursively</li> <li><code>--update-all</code>: Update all dependencies and sub-dependencies</li> <li><code>--pre</code>, <code>--prerelease</code>: Allow prereleases to be pinned</li> <li><code>-u</code>, <code>--unconstrained</code>: Ignore the version constraint of packages</li> <li><code>-k</code>, <code>--skip</code>: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use<code>:all</code> to skip all hooks. Use<code>:pre</code> and<code>:post</code> to skip all pre or post hooks.</li> <li><code>--venv</code> <code>NAME</code>: Run the command in the virtual environment with the given key. [env var: <code>PDM_IN_VENV</code>]</li> <li><code>-t</code>, <code>--top</code>: Only update those listed in<code>pyproject.toml</code></li> <li><code>--dry-run</code>, <code>--outdated</code>: Show the difference only without modifying the lockfile content</li> <li><code>--no-sync</code>: Only update lock file but do not sync packages (default: <code>True</code>)</li> </ul> <p>Install Options:</p> <ul> <li><code>--no-editable</code>: Install non-editable versions for all packages</li> <li><code>--no-self</code>: Don't install the project itself. [env var: <code>PDM_NO_SELF</code>]</li> <li><code>--fail-fast</code>, <code>-x</code>: Abort on first installation error</li> <li><code>--no-isolation</code>: Do not isolate the build in a clean environment</li> </ul> <p>Dependencies Selection:</p> <ul> <li><code>-G</code>, <code>--group</code> <code>GROUP</code>: Select group of optional-dependencies separated by comma or dev-dependencies (with <code>-d</code>). Can be supplied multiple times, use<code>:all</code> to include all groups under the same species.</li> <li><code>--no-default</code>: Don't include dependencies from the default group (default: <code>True</code>)</li> <li><code>-d</code>, <code>--dev</code>: Select dev dependencies</li> <li><code>--prod</code>, <code>--production</code>: Unselect dev dependencies</li> </ul>"},{"location":"reference/cli/#use","title":"use","text":"<p>Use the given python version or path as base interpreter</p> <p>Positional Arguments:</p> <ul> <li><code>python</code>: Specify the Python version or path</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-g</code>, <code>--global</code>: Use the global project, supply the project root with <code>-p</code> option</li> <li><code>-p</code>, <code>--project</code>: Specify another path as the project root, which changes the base of<code>pyproject.toml</code> and <code>__pypackages__</code></li> <li><code>-k</code>, <code>--skip</code>: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use<code>:all</code> to skip all hooks. Use<code>:pre</code> and<code>:post</code> to skip all pre or post hooks.</li> <li><code>-f</code>, <code>--first</code>: Select the first matched interpreter</li> <li><code>-i</code>, <code>--ignore-remembered</code>: Ignore the remembered selection</li> <li><code>--venv</code>: Use the interpreter in the virtual environment with the given name</li> </ul>"},{"location":"reference/cli/#venv","title":"venv","text":"<p>Virtualenv management</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>--path</code>: Show the path to the given virtualenv</li> <li><code>--python</code>: Show the python interpreter path for the given virtualenv</li> </ul> <p>Commands:</p>"},{"location":"reference/cli/#create","title":"create","text":"<p>Create a virtualenv</p> <p>Positional Arguments:</p> <ul> <li><code>python</code>: Specify which python should be used to create the virtualenv</li> <li><code>venv_args</code>: Additional arguments that will be passed to the backend</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-w</code>, <code>--with</code>: Specify the backend to create the virtualenv</li> <li><code>-f</code>, <code>--force</code>: Recreate if the virtualenv already exists</li> <li><code>-n</code>, <code>--name</code>: Specify the name of the virtualenv</li> <li><code>--with-pip</code>: Install pip with the virtualenv</li> </ul>"},{"location":"reference/cli/#list_4","title":"list","text":"<p>List all virtualenvs associated with this project</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> </ul>"},{"location":"reference/cli/#remove_4","title":"remove","text":"<p>Remove the virtualenv with the given name</p> <p>Positional Arguments:</p> <ul> <li><code>env</code>: The key of the virtualenv</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-y</code>, <code>--yes</code>: Answer yes on the following question</li> </ul>"},{"location":"reference/cli/#activate","title":"activate","text":"<p>Activate the virtualenv with the given name</p> <p>Positional Arguments:</p> <ul> <li><code>env</code>: The key of the virtualenv</li> </ul> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> </ul>"},{"location":"reference/cli/#purge","title":"purge","text":"<p>Purge selected/all created Virtualenvs</p> <p>Optional Arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> <li><code>-v</code>, <code>--verbose</code>: Use <code>-v</code> for detailed output and <code>-vv</code> for more detailed</li> <li><code>-f</code>, <code>--force</code>: Force purging without prompting for confirmation</li> <li><code>-i</code>, <code>--interactive</code>: Interactively purge selected Virtualenvs</li> </ul>"},{"location":"reference/configuration/","title":"Configurations","text":""},{"location":"reference/configuration/#color-theme","title":"Color Theme","text":"<p>The default theme used by PDM is as follows:</p> Key Default Style <code>primary</code> cyan <code>success</code> green <code>warning</code> yellow <code>error</code> red <code>info</code> blue <code>req</code> bold green <p>You can change the theme colors with <code>pdm config</code> command. For example, to change the <code>primary</code> color to <code>magenta</code>:</p> <pre><code>pdm config theme.primary magenta\n</code></pre> <p>Or use a hex color code:</p> <pre><code>pdm config theme.success '#51c7bd'\n</code></pre>"},{"location":"reference/configuration/#available-configurations","title":"Available Configurations","text":"<p>The following configuration items can be retrieved and modified by <code>pdm config</code> command.</p> Config Item Description Default Value Available in Project Env var <code>build_isolation</code> Isolate the build environment from the project environment Yes True <code>PDM_BUILD_ISOLATION</code> <code>cache_dir</code> The root directory of cached files The default cache location on OS No <code>check_update</code> Check if there is any newer version available True No <code>PDM_CHECK_UPDATE</code> <code>global_project.fallback</code> Use the global project implicitly if no local project is found <code>False</code> No <code>global_project.fallback_verbose</code> If True show message when global project is used implicitly <code>True</code> No <code>global_project.path</code> The path to the global project <code>&lt;default config location on OS&gt;/global-project</code> No <code>global_project.user_site</code> Whether to install to user site <code>False</code> No <code>install.cache</code> Enable caching of wheel installations False Yes <code>install.cache_method</code> Specify how to create links to the caches(<code>symlink</code> or <code>pth</code>) <code>symlink</code> Yes <code>install.parallel</code> Whether to perform installation and uninstallation in parallel <code>True</code> Yes <code>PDM_PARALLEL_INSTALL</code> <code>project_max_depth</code> The max depth to search for a project through the parents 5 No <code>PDM_PROJECT_MAX_DEPTH</code> <code>python.use_pyenv</code> Use the pyenv interpreter <code>True</code> Yes <code>python.use_venv</code> Use virtual environments when available <code>True</code> Yes <code>PDM_USE_VENV</code> <code>pypi.url</code> The URL of PyPI mirror <code>https://pypi.org/simple</code> Yes <code>PDM_PYPI_URL</code> <code>pypi.username</code> The username to access PyPI Yes <code>PDM_PYPI_USERNAME</code> <code>pypi.password</code> The password to access PyPI Yes <code>PDM_PYPI_PASSWORD</code> <code>pypi.ignore_stored_index</code> Ignore the configured indexes <code>False</code> Yes <code>PDM_IGNORE_STORED_INDEX</code> <code>pypi.ca_certs</code> Path to a PEM-encoded CA cert bundle (used for server cert verification) The CA certificates from certifi No <code>pypi.client_cert</code> Path to a PEM-encoded client cert and optional key No <code>pypi.client_key</code> Path to a PEM-encoded client cert private key, if not in pypi.client_cert No <code>pypi.verify_ssl</code> Verify SSL certificate when query PyPI <code>True</code> Yes <code>pypi.json_api</code> Consult PyPI's JSON API for package metadata <code>False</code> Yes <code>PDM_PYPI_JSON_API</code> <code>pypi.&lt;name&gt;.url</code> The URL of custom package source <code>https://pypi.org/simple</code> Yes <code>pypi.&lt;name&gt;.username</code> The username to access custom source Yes <code>pypi.&lt;name&gt;.password</code> The password to access custom source Yes <code>pypi.&lt;name&gt;.type</code> <code>find_links</code> <code>index</code> <code>index</code> Yes <code>pypi.&lt;name&gt;.ca_certs</code> Path to a PEM-encoded CA cert bundle (used for server cert verification) The CA certificates from certifi No <code>pypi.&lt;name&gt;.verify_ssl</code> Verify SSL certificate when query custom source <code>True</code> Yes <code>strategy.save</code> Specify how to save versions when a package is added <code>minimum</code>(can be: <code>exact</code>, <code>wildcard</code>, <code>minimum</code>, <code>compatible</code>) Yes <code>strategy.update</code> The default strategy for updating packages <code>reuse</code>(can be : <code>eager</code>) Yes <code>strategy.resolve_max_rounds</code> Specify the max rounds of resolution process 10000 Yes <code>PDM_RESOLVE_MAX_ROUNDS</code> <code>venv.location</code> Parent directory for virtualenvs <code>&lt;default data location on OS&gt;/venvs</code> No <code>venv.backend</code> Default backend to create virtualenv <code>virtualenv</code> Yes <code>PDM_VENV_BACKEND</code> <code>venv.prompt</code> Formatted string to be displayed in the prompt when virtualenv is active <code>{project_name}-{python_version}</code> Yes <code>PDM_VENV_PROMPT</code> <code>venv.in_project</code> Create virtualenv in <code>.venv</code> under project root <code>False</code> Yes <code>PDM_VENV_IN_PROJECT</code> <code>venv.with_pip</code> Install pip when creating a new venv <code>False</code> Yes <code>PDM_VENV_WITH_PIP</code> <code>repository.&lt;name&gt;.url</code> The URL of custom package source <code>https://pypi.org/simple</code> Yes <code>repository.&lt;name&gt;.username</code> The username to access custom repository Yes <code>repository.&lt;name&gt;.password</code> The password to access custom repository Yes <code>repository.&lt;name&gt;.ca_certs</code> Path to a PEM-encoded CA cert bundle (used for server cert verification) The CA certificates from certifi No <code>repository.&lt;name&gt;.verify_ssl</code> Verify SSL certificate when uploading to repository <code>True</code> Yes <p>If the corresponding env var is set, the value will take precedence over what is saved in the config file.</p>"},{"location":"reference/pep621/","title":"PEP 621 Metadata","text":"<p>The project metadata are stored in the <code>pyproject.toml</code>. The specifications are defined by PEP 621, PEP 631 and PEP 639. Read the detailed specifications in the PEPs.</p> <p>In the following part of this document, metadata should be written under <code>[project]</code> table if not given explicitly.</p>"},{"location":"reference/pep621/#multiline-description","title":"Multiline description","text":"<p>You can split a long description onto multiple lines, thanks to TOML support for multiline strings. Just remember to escape new lines, so the final description appears on one line only in your package metadata. Indentation will be removed as well when escaping new lines:</p> <pre><code>description = \"\"\"\\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, \\\n    sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \\\n    Ut enim ad minim veniam, quis nostrud exercitation ullamco \\\n    laboris nisi ut aliquip ex ea commodo consequat.\\\n\"\"\"\n</code></pre> <p>See TOML's specification on strings.</p>"},{"location":"reference/pep621/#package-version","title":"Package version","text":"StaticDynamic <pre><code>[project]\nversion = \"1.0.0\"\n</code></pre> <pre><code>[project]\n...\ndynamic = [\"version\"]\n\n[tool.pdm]\nversion = { source = \"file\", path = \"mypackage/__version__.py\" }\n</code></pre> <p>The version will be read from the <code>mypackage/__version__.py</code> file searching for the pattern: <code>__version__ = \"{version}\"</code>.</p> <p>Read more information about other configurations in dynamic versioning.</p>"},{"location":"reference/pep621/#dependency-specification","title":"Dependency specification","text":"<p>The <code>project.dependencies</code> is an array of dependency specification strings following the PEP 440 and PEP 508.</p> <p>Examples:</p> <pre><code>[project]\n...\ndependencies = [\n# Named requirement\n\"requests\",\n# Named requirement with version specifier\n\"flask &gt;= 1.1.0\",\n# Requirement with environment marker\n\"pywin32; sys_platform == 'win32'\",\n# URL requirement\n\"pip @ git+https://github.com/pypa/pip.git@20.3.1\"\n]\n</code></pre>"},{"location":"reference/pep621/#optional-dependencies","title":"Optional dependencies","text":"<p>You can have some requirements optional, which is similar to <code>setuptools</code>' <code>extras_require</code> parameter.</p> <pre><code>[project.optional-dependencies]\nsocks = [ 'PySocks &gt;= 1.5.6, != 1.5.7, &lt; 2' ]\ntests = [\n'ddt &gt;= 1.2.2, &lt; 2',\n'pytest &lt; 6',\n'mock &gt;= 1.0.1, &lt; 4; python_version &lt; \"3.4\"',\n]\n</code></pre> <p>To install a group of optional dependencies:</p> <pre><code>pdm install -G socks\n</code></pre> <p><code>-G</code> option can be given multiple times to include more than one group.</p>"},{"location":"reference/pep621/#context-variables-expansion","title":"Context variables expansion","text":"<p>Depending on which build backend you are using, PDM will expand some variables in the dependency strings.</p>"},{"location":"reference/pep621/#environment-variables","title":"Environment variables","text":"pdm-pep517hatchling <pre><code>[project]\ndependencies = [\"flask @ https://${USERNAME}:${PASSWORD}/artifacts.io/Flask-1.1.2.tar.gz\"]\n</code></pre> <pre><code>[project]\ndependencies = [\"flask @ https://{env:USERNAME}:{env:PASSWORD}/artifacts.io/Flask-1.1.2.tar.gz\"]\n</code></pre> <p>Find more usages here</p> <p>Don't worry about credential leakage, the environment variables will be expanded when needed and kept untouched in the lock file.</p>"},{"location":"reference/pep621/#relative-paths","title":"Relative paths","text":"<p>When you add a package from a relative path, PDM will automatically save it as a relative path for <code>pdm-pep517</code> and <code>hatchling</code>.</p> <p>For example, if you run <code>pdm add ./my-package</code>, it will result in the following line in <code>pyproject.toml</code>.</p> pdm-pep517hatchling <pre><code>[project]\ndependencies = [\"my-package @ file:///${PROJECT_ROOT}/my-package\"]\n</code></pre> <pre><code>[project]\ndependencies = [\"my-package @ {root:uri}/my-package\"]\n</code></pre> <p>By default, hatchling doesn't support direct references in the dependency string, you need to turn it on in <code>pyproject.toml</code>:</p> <pre><code>[tool.hatch.metadata]\nallow-direct-references = true\n</code></pre> <p>The relative path will be expanded based on the project root when installing or locking.</p>"},{"location":"reference/pep621/#console-scripts","title":"Console scripts","text":"<p>The following content:</p> <pre><code>[project.scripts]\nmycli = \"mycli.__main__:main\"\n</code></pre> <p>will be translated to <code>setuptools</code> style:</p> <pre><code>entry_points = {\n    'console_scripts': [\n        'mycli=mycli.__main__:main'\n    ]\n}\n</code></pre> <p>Also, <code>[project.gui-scripts]</code> will be translated to <code>gui_scripts</code> entry points group in <code>setuptools</code> style.</p>"},{"location":"reference/pep621/#entry-points","title":"Entry points","text":"<p>Other types of entry points are given by <code>[project.entry-points.&lt;type&gt;]</code> section, with the same format of <code>[project.scripts]</code>:</p> <pre><code>[project.entry-points.pytest11]\nmyplugin = \"mypackage.plugin:pytest_plugin\"\n</code></pre> <p>If the entry point name contains dots or other special characters, wrap it in quotes:</p> <pre><code>[project.entry-points.\"flake8.extension\"]\nmyplugin = \"mypackage.plugin:flake8_plugin\"\n</code></pre>"},{"location":"usage/advanced/","title":"Advanced Usage","text":""},{"location":"usage/advanced/#automatic-testing","title":"Automatic Testing","text":""},{"location":"usage/advanced/#use-tox-as-the-runner","title":"Use Tox as the runner","text":"<p>Tox is a great tool for testing against multiple Python versions or dependency sets. You can configure a <code>tox.ini</code> like the following to integrate your testing with PDM:</p> <pre><code>[tox]\nenv_list = py{36,37,38},lint\nisolated_build = true\n\n[testenv]\nsetenv =\nPDM_IGNORE_SAVED_PYTHON=\"1\"\ndeps = pdm\ncommands =\npdm install --dev\npytest tests\n\n[testenv:lint]\ndeps = pdm\ncommands =\npdm install -G lint\nflake8 src/\n</code></pre> <p>To use the virtualenv created by Tox, you should make sure you have set <code>pdm config python.use_venv true</code>. PDM then will install dependencies from <code>pdm lock</code> into the virtualenv. In the dedicated venv you can directly run tools by <code>pytest tests/</code> instead of <code>pdm run pytest tests/</code>.</p> <p>You should also make sure you don't run <code>pdm add/pdm remove/pdm update/pdm lock</code> in the test commands, otherwise the <code>pdm lock</code> file will be modified unexpectedly. Additional dependencies can be supplied with the <code>deps</code> config. Besides, <code>isolated_buid</code> and <code>passenv</code> config should be set as the above example to make PDM work properly.</p> <p>To get rid of these constraints, there is a Tox plugin tox-pdm which can ease the usage. You can install it by</p> <pre><code>pip install tox-pdm\n</code></pre> <p>Or,</p> <pre><code>pdm add --dev tox-pdm\n</code></pre> <p>And you can make the <code>tox.ini</code> much tidier as following, :</p> <pre><code>[tox]\nenv_list = py{36,37,38},lint\n\n[testenv]\ngroups = dev\ncommands =\npytest tests\n\n[testenv:lint]\ngroups = lint\ncommands =\nflake8 src/\n</code></pre> <p>See the project's README for a detailed guidance.</p>"},{"location":"usage/advanced/#use-nox-as-the-runner","title":"Use Nox as the runner","text":"<p>Nox is another great tool for automated testing. Unlike tox, Nox uses a standard Python file for configuration.</p> <p>It is much easier to use PDM in Nox, here is an example of <code>noxfile.py</code>:</p> <pre><code>import os\nimport nox\n\nos.environ.update({\"PDM_IGNORE_SAVED_PYTHON\": \"1\"})\n@nox.session\ndef tests(session):\n    session.run('pdm', 'install', '-G', 'test', external=True)\n    session.run('pytest')\n\n@nox.session\ndef lint(session):\n    session.run('pdm', 'install', '-G', 'lint', external=True)\n    session.run('flake8', '--import-order-style', 'google')\n</code></pre> <p>Note that <code>PDM_IGNORE_SAVED_PYTHON</code> should be set so that PDM can pick up the Python in the virtualenv correctly. Also make sure <code>pdm</code> is available in the <code>PATH</code>. Before running nox, you should also ensure configuration item <code>python.use_venv</code> is true to enable venv reusing.</p>"},{"location":"usage/advanced/#about-pep-582-__pypackages__-directory","title":"About PEP 582 <code>__pypackages__</code> directory","text":"<p>By default, if you run tools by <code>pdm run</code>, <code>__pypackages__</code> will be seen by the program and all subprocesses created by it. This means virtual environments created by those tools are also aware of the packages inside <code>__pypackages__</code>, which result in unexpected behavior in some cases. For <code>nox</code>, you can avoid this by adding a line in <code>noxfile.py</code>:</p> <pre><code>os.environ.pop(\"PYTHONPATH\", None)\n</code></pre> <p>For <code>tox</code>, <code>PYTHONPATH</code> will not be passed to the test sessions so this isn't going to be a problem. Moreover, it is recommended to make <code>nox</code> and <code>tox</code> live in their own pipx environments so you don't need to install for every project. In this case, PEP 582 packages will not be a problem either.</p>"},{"location":"usage/advanced/#use-pdm-in-continuous-integration","title":"Use PDM in Continuous Integration","text":"<p>Only one thing to keep in mind -- PDM can't be installed on Python &lt; 3.7, so if your project is to be tested on those Python versions, you have to make sure PDM is installed on the correct Python version, which can be different from the target Python version the particular job/task is run on.</p> <p>Fortunately, if you are using GitHub Action, there is pdm-project/setup-pdm to make this process easier. Here is an example workflow of GitHub Actions, while you can adapt it for other CI platforms.</p> <pre><code>Testing:\nruns-on: ${{ matrix.os }}\nstrategy:\nmatrix:\npython-version: [3.7, 3.8, 3.9, '3.10']\nos: [ubuntu-latest, macOS-latest, windows-latest]\n\nsteps:\n- uses: actions/checkout@v3\n- name: Set up PDM\nuses: pdm-project/setup-pdm@v2\nwith:\npython-version: ${{ matrix.python-version }}\n\n- name: Install dependencies\nrun: |\npdm sync -d -G testing\n- name: Run Tests\nrun: |\npdm run -v pytest tests\n</code></pre> <p>TIPS</p> <p>For GitHub Action users, there is a known compatibility issue on Ubuntu virtual environment. If PDM parallel install is failed on that machine you should either set <code>parallel_install</code> to <code>false</code> or set env <code>LD_PRELOAD=/lib/x86_64-linux-gnu/libgcc_s.so.1</code>. It is already handled by the <code>pdm-project/setup-pdm</code> action.</p> <p>Note</p> <p>If your CI scripts run without a proper user set, you might get permission errors when PDM tries to create its cache directory. To work around this, you can set the HOME environment variable yourself, to a writable directory, for example:</p> <pre><code>export HOME=/tmp/home\n</code></pre>"},{"location":"usage/advanced/#use-pdm-in-a-multi-stage-dockerfile","title":"Use PDM in a multi-stage Dockerfile","text":"<p>It is possible to use PDM in a multi-stage Dockerfile to first install the project and dependencies into <code>__pypackages__</code> and then copy this folder into the final stage, adding it to <code>PYTHONPATH</code>.</p> <pre><code># build stage\nFROM python:3.8 AS builder\n\n# install PDM\nRUN pip install -U pip setuptools wheel\nRUN pip install pdm\n\n# copy files\nCOPY pyproject.toml pdm.lock README.md /project/\nCOPY src/ /project/src\n\n# install dependencies and project into the local packages directory\nWORKDIR /project\nRUN mkdir __pypackages__ &amp;&amp; pdm sync --prod --no-editable\n\n\n# run stage\nFROM python:3.8\n\n# retrieve packages from build stage\nENV PYTHONPATH=/project/pkgs\nCOPY --from=builder /project/__pypackages__/3.8/lib /project/pkgs\n\n# set command/entrypoint, adapt to fit your needs\nCMD [\"python\", \"-m\", \"project\"]\n</code></pre>"},{"location":"usage/advanced/#use-pdm-to-manage-a-monorepo","title":"Use PDM to manage a monorepo","text":"<p>With PDM, you can have multiple sub-packages within a single project, each with its own <code>pyproject.toml</code> file. And you can create only one <code>pdm.lock</code> file to lock all dependencies. The sub-packages can have each other as their dependencies. To achieve this, follow these steps:</p> <p><code>project/pyproject.toml</code>:</p> <pre><code>[tool.pdm.dev-dependencies]\ndev = [\n\"-e file:///${PROJECT_ROOT}/packages/foo-core\",\n\"-e file:///${PROJECT_ROOT}/packages/foo-cli\",\n\"-e file:///${PROJECT_ROOT}/packages/foo-app\",\n]\n</code></pre> <p><code>packages/foo-cli/pyproject.toml</code>:</p> <pre><code>[projects]\ndependencies = [\"foo-core\"]\n</code></pre> <p><code>packages/foo-app/pyproject.toml</code>:</p> <pre><code>[projects]\ndependencies = [\"foo-core\"]\n</code></pre> <p>Now, run <code>pdm install</code> in the project root, and you will get a <code>pdm.lock</code> with all dependencies locked. All sub-packages will be installed in editable mode.</p> <p>Look at the \ud83d\ude80 Example repository for more details.</p>"},{"location":"usage/advanced/#hooks-for-pre-commit","title":"Hooks for <code>pre-commit</code>","text":"<p><code>pre-commit</code> is a powerful framework for managing git hooks in a centralized fashion. PDM already uses <code>pre-commit</code> hooks for its internal QA checks. PDM exposes also several hooks that can be run locally or in CI pipelines.</p>"},{"location":"usage/advanced/#export-requirementstxt-or-setuppy","title":"Export <code>requirements.txt</code> or <code>setup.py</code>","text":"<p>This hook wraps the command <code>pdm export</code> along with any valid argument. It can be used as a hook (e.g., for CI) to ensure that you are going to check in the codebase a <code>requirements.txt</code> or a <code>setup.py</code> file, which reflects the actual content of <code>pdm lock</code>.</p> <pre><code># export python requirements\n- repo: https://github.com/pdm-project/pdm\nrev: 2.x.y # a PDM release exposing the hook\nhooks:\n- id: pdm-export\n# command arguments, e.g.:\nargs: ['-o', 'requirements.txt', '--without-hashes']\nfiles: ^pdm.lock$\n</code></pre>"},{"location":"usage/advanced/#check-pdmlock-is-up-to-date-with-pyprojecttoml","title":"Check <code>pdm.lock</code> is up to date with pyproject.toml","text":"<p>This hook wraps the command <code>pdm lock --check</code> along with any valid argument. It can be used as a hook (e.g., for CI) to ensure that whenever <code>pyproject.toml</code> has a dependency added/changed/removed, that <code>pdm.lock</code> is also up to date.</p> <pre><code>- repo: https://github.com/pdm-project/pdm\nrev: 2.x.y # a PDM release exposing the hook\nhooks:\n- id: pdm-lock-check\n</code></pre>"},{"location":"usage/config/","title":"Configure the Project","text":"<p>PDM's <code>config</code> command works just like <code>git config</code>, except that <code>--list</code> isn't needed to show configurations.</p> <p>Show the current configurations:</p> <pre><code>pdm config\n</code></pre> <p>Get one single configuration:</p> <pre><code>pdm config pypi.url\n</code></pre> <p>Change a configuration value and store in home configuration:</p> <pre><code>pdm config pypi.url \"https://test.pypi.org/simple\"\n</code></pre> <p>By default, the configuration are changed globally, if you want to make the config seen by this project only, add a <code>--local</code> flag:</p> <pre><code>pdm config --local pypi.url \"https://test.pypi.org/simple\"\n</code></pre> <p>Any local configurations will be stored in <code>pdm.toml</code> under the project root directory.</p>"},{"location":"usage/config/#configuration-files","title":"Configuration files","text":"<p>The configuration files are searched in the following order:</p> <ol> <li><code>&lt;PROJECT_ROOT&gt;/pdm.toml</code> - The project configuration</li> <li><code>&lt;CONFIG_ROOT&gt;/config.toml</code> - The home configuration</li> <li><code>&lt;SITE_CONFIG_ROOT&gt;/config.toml</code> - The site configuration</li> </ol> <p>where <code>&lt;CONFIG_ROOT&gt;</code> is:</p> <ul> <li><code>$XDG_CONFIG_HOME/pdm</code> (<code>~/.config/pdm</code> in most cases) on Linux as defined by XDG Base Directory Specification</li> <li><code>~/Library/Application Support/pdm</code> on macOS as defined by Apple File System Basics</li> <li><code>%USERPROFILE%\\AppData\\Local\\pdm</code> on Windows as defined in Known folders</li> </ul> <p>and <code>&lt;SITE_CONFIG_ROOT&gt;</code> is:</p> <ul> <li><code>$XDG_CONFIG_DIRS/pdm</code> (<code>/etc/xdg/pdm</code> in most cases) on Linux as defined by XDG Base Directory Specification</li> <li><code>/Library/Application Support/pdm</code> on macOS as defined by Apple File System Basics</li> <li><code>C:\\ProgramData\\pdm\\pdm</code> on Windows as defined in Known folders</li> </ul> <p>If <code>-g/--global</code> option is used, the first item will be replaced by <code>&lt;CONFIG_ROOT&gt;/global-project/pdm.toml</code>.</p> <p>You can find all available configuration items in Configuration Page.</p>"},{"location":"usage/config/#allow-prereleases-in-resolution-result","title":"Allow prereleases in resolution result","text":"<p>By default, <code>pdm</code>'s dependency resolver will ignore prereleases unless there are no stable versions for the given version range of a dependency. This behavior can be changed by setting <code>allow_prereleases</code> to <code>true</code> in <code>[tool.pdm]</code> table:</p> <pre><code>[tool.pdm]\nallow_prereleases = true\n</code></pre>"},{"location":"usage/config/#configure-the-package-indexes","title":"Configure the package indexes","text":"<p>You can tell PDM where to to find the packages by either specifying sources in the <code>pyproject.toml</code> or via <code>pypi.*</code> configurations.</p> <p>Add sources in <code>pyproject.toml</code>:</p> <pre><code>[[tool.pdm.source]]\nname = \"private\"\nurl = \"https://private.pypi.org/simple\"\nverify_ssl = true\n</code></pre> <p>Change the default index via <code>pdm config</code>:</p> <pre><code>pdm config pypi.url \"https://test.pypi.org/simple\"\n</code></pre> <p>Add extra indexes via <code>pdm config</code>:</p> <pre><code>pdm config pypi.extra.url \"https://extra.pypi.org/simple\"\n</code></pre> <p>The available configuration options are:</p> <ul> <li><code>url</code>: The URL of the index</li> <li><code>verify_ssl</code>: (Optional)Whether to verify SSL certificates, default to true</li> <li><code>username</code>: (Optional)The username for the index</li> <li><code>password</code>: (Optional)The password for the index</li> <li><code>type</code>: (Optional) index or find_links, default to index</li> </ul> About the source types <p>By default, all sources are PEP 503 style \"indexes\" like pip's <code>--index-url</code> and <code>--extra-index-url</code>, however, you can set the type to <code>find_links</code> which contains files or links to be looked for directly. See this answer for the difference between the two types.</p> <p>These configurations are read in the following order to build the final source list:</p> <ul> <li><code>pypi.url</code>, if <code>pypi</code> doesn't appear in the <code>name</code> field of any source in <code>pyproject.toml</code></li> <li>Sources in <code>pyproject.toml</code></li> <li><code>pypi.&lt;name&gt;.url</code> in PDM config.</li> </ul> <p>You can set <code>pypi.ignore_stored_index</code> to <code>true</code> to disable all indexes from the PDM config and only use those specified in <code>pyproject.toml</code>.</p> <p>Disable the default PyPI index</p> <p>If you want to omit the default PyPI index, just set the source name to <code>pypi</code> and that source will replace it.</p> <pre><code>[[tool.pdm.source]]\nurl = \"https://private.pypi.org/simple\"\nverify_ssl = true\nname = \"pypi\"\n</code></pre> Indexes in <code>pyproject.toml</code> or config <p>When you want to share the indexes with other people who are going to use the project, you should add them in <code>pyproject.toml</code>. For example, some packages only exist in a private index and can't be installed if someone doesn't configure the index. Otherwise, store them in the local config which won't be seen by others.</p>"},{"location":"usage/config/#respect-the-order-of-the-sources","title":"Respect the order of the sources","text":"<p>By default, all sources are considered equal, packages from them are sorted by the version and wheel tags, the most matching one with the highest version is selected.</p> <p>In some cases you may want to return packages from the preferred source, and search for others if they are missing from the former source. PDM supports this by reading the configuration <code>respect-source-order</code>:</p> <pre><code>[tool.pdm.resolution]\nrespect-source-order = true\n</code></pre>"},{"location":"usage/config/#store-credentials-with-the-index","title":"Store credentials with the index","text":"<p>You can specify credentials in the URL with <code>${ENV_VAR}</code> variable expansion and these variables will be read from the environment variables:</p> <pre><code>[[tool.pdm.source]]\nname = \"private\"\nurl = \"https://${PRIVATE_PYPI_USERNAME}:${PRIVATE_PYPI_PASSWORD}/private.pypi.org/simple\"\n</code></pre>"},{"location":"usage/config/#index-configuration-merging","title":"Index configuration merging","text":"<p>Index configurations are merged with the <code>name</code> field of <code>[[tool.pdm.source]]</code> table or <code>pypi.&lt;name&gt;</code> key in the config file. This enables you to store the url and credentials separately, to avoid secrets being exposed in the source control. For example, if you have the following configuration:</p> <pre><code>[[tool.pdm.source]]\nname = \"private\"\nurl = \"https://private.pypi.org/simple\"\n</code></pre> <p>You can store the credentials in the config file:</p> <pre><code>pdm config pypi.private.username \"foo\"\npdm config pypi.private.password \"bar\"\n</code></pre> <p>PDM can retrieve the configurations for <code>private</code> index from both places.</p> <p>If the index requires a username and password, but they can't be found from the environment variables nor config file, PDM will prompt you to enter them. Or, if <code>keyring</code> is installed, it will be used as the credential store. PDM can use the <code>keyring</code> from either the installed package or the CLI.</p>"},{"location":"usage/config/#central-installation-caches","title":"Central installation caches","text":"<p>If a package is required by many projects on the system, each project has to keep its own copy. This can be a waste of disk space, especially for data science and machine learning projects.</p> <p>PDM supports caching installations of the same wheel by installing it in a centralized package repository and linking to that installation in different projects. To enable it, run:</p> <pre><code>pdm config install.cache on\n</code></pre> <p>It can be enabled on a per-project basis by adding the <code>--local</code> option to the command.</p> <p>The caches are located in <code>$(pdm config cache_dir)/packages</code>. You can view the cache usage with <code>pdm cache info</code>. Note that the cached installs are managed automatically -- they will be deleted if they are not linked to any projects. Manually deleting the caches from disk may break some projects on the system.</p> <p>Note</p> <p>Only the installation of named requirements resolved from PyPI can be cached.</p>"},{"location":"usage/config/#configure-the-repositories-for-upload","title":"Configure the repositories for upload","text":"<p>When using the <code>pdm publish</code> command, it reads the repository secrets from the global config file(<code>&lt;CONFIG_ROOT&gt;/config.toml</code>). The content of the config is as follows:</p> <pre><code>[repository.pypi]\nusername = \"frostming\"\npassword = \"&lt;secret&gt;\"\n\n[repository.company]\nurl = \"https://pypi.company.org/legacy/\"\nusername = \"frostming\"\npassword = \"&lt;secret&gt;\"\nca_certs = \"/path/to/custom-cacerts.pem\"\n</code></pre> <p>Alternatively, these credentials can be provided with env vars:</p> <pre><code>export PDM_PUBLISH_REPO=...\nexport PDM_PUBLISH_USERNAME=...\nexport PDM_PUBLISH_PASSWORD=...\nexport PDM_PUBLISH_CA_CERTS=...\n</code></pre> <p>A PEM-encoded Certificate Authority bundle (<code>ca_certs</code>) can be used for local / custom PyPI repositories where the server certificate is not signed by the standard certifi CA bundle.</p> <p>Note</p> <p>Repositories are different from indexes in the previous section. Repositories are for publishing while indexes are for locking and resolving. They don't share the configuration.</p> <p>Tip</p> <p>You don't need to configure the <code>url</code> for <code>pypi</code> and <code>testpypi</code> repositories, they are filled by default values. The username, password, and certificate authority bundle can be passed in from the command line for <code>pdm publish</code> via <code>--username</code>, <code>--password</code>, and <code>--ca-certs</code>, respectively.</p> <p>To change the repository config from the command line, use the <code>pdm config</code> command:</p> <pre><code>pdm config repository.pypi.username \"__token__\"\npdm config repository.pypi.password \"my-pypi-token\"\n\npdm config repository.company.url \"https://pypi.company.org/legacy/\"\npdm config repository.company.ca_certs \"/path/to/custom-cacerts.pem\"\n</code></pre>"},{"location":"usage/config/#password-management-with-keyring","title":"Password management with keyring","text":"<p>When keyring is available and supported, the passwords will be stored to and retrieved from the keyring instead of writing to the config file. This supports both indexes and upload repositories. The service name will be <code>pdm-pypi-&lt;name&gt;</code> for an index and <code>pdm-repository-&lt;name&gt;</code> for a repository.</p> <p>You can enable keyring by either installing <code>keyring</code> into the same environment as PDM or installing globally. To add keyring to the PDM environment:</p> <pre><code>pdm self add keyring\n</code></pre> <p>Alternatively, if you have installed a copy of keyring globally, make sure the CLI is exposed in the <code>PATH</code> env var to make it discoverable by PDM:</p> <pre><code>export PATH=$PATH:path/to/keyring/bin\n</code></pre>"},{"location":"usage/config/#override-the-resolved-package-versions","title":"Override the resolved package versions","text":"<p>New in version 1.12.0</p> <p>Sometimes you can't get a dependency resolution due to incorrect version ranges set by upstream libraries that you can't fix. In this case you can use PDM's overrides feature to force a specific version of a package to be installed.</p> <p>Given the following configuration in <code>pyproject.toml</code>:</p> <pre><code>[tool.pdm.resolution.overrides]\nasgiref = \"3.2.10\"  # exact version\nurllib3 = \"&gt;=1.26.2\"  # version range\npytz = \"https://mypypi.org/packages/pytz-2020.9-py3-none-any.whl\"  # absolute URL\n</code></pre> <p>Each entry of that table is a package name with the wanted version. In this example, PDM will resolve the above packages into the given versions no matter whether there is any other resolution available.</p> <p>Warning</p> <p>By using <code>[tool.pdm.resolution.overrides]</code> setting, you are at your own risk of any incompatibilities from that resolution. It can only be used if there is no valid resolution for your requirements and you know the specific version works. Most of the time, you can just add any transient constraints to the <code>dependencies</code> array.</p>"},{"location":"usage/config/#passing-constant-arguments-to-every-pdm-invocation","title":"Passing constant arguments to every pdm invocation","text":"<p>New in version 2.7.0</p> <p>You can add extra options passed to individual pdm commands by <code>tool.pdm.options</code> configuration:</p> <pre><code>[tool.pdm.options]\nadd = [\"--no-isolation\", \"--no-self\"]\ninstall = [\"--no-self\"]\nlock = [\"--no-cross-platform\"]\n</code></pre> <p>These options will be added right after the command name. For instance, based on the configuration above, <code>pdm add requests</code> is equivalent to <code>pdm add --no-isolation --no-self requests</code>.</p>"},{"location":"usage/dependency/","title":"Manage Dependencies","text":"<p>PDM provides a bunch of handful commands to help manage your project and dependencies. The following examples are run on Ubuntu 18.04, a few changes must be done if you are using Windows.</p>"},{"location":"usage/dependency/#add-dependencies","title":"Add dependencies","text":"<p><code>pdm add</code> can be followed by one or several dependencies, and the dependency specification is described in PEP 508.</p> <p>Examples:</p> <pre><code>pdm add requests   # add requests\npdm add requests==2.25.1   # add requests with version constraint\npdm add requests[socks]   # add requests with extra dependency\npdm add \"flask&gt;=1.0\" flask-sqlalchemy   # add multiple dependencies with different specifiers\n</code></pre> <p>PDM also allows extra dependency groups by providing <code>-G/--group &lt;name&gt;</code> option, and those dependencies will go to <code>[project.optional-dependencies.&lt;name&gt;]</code> table in the project file, respectively.</p> <p>You can reference other optional groups in <code>optional-dependencies</code>, even before the package is uploaded:</p> <pre><code>[project]\nname = \"foo\"\nversion = \"0.1.0\"\n\n[project.optional-dependencies]\nsocks = [\"pysocks\"]\njwt = [\"pyjwt\"]\nall = [\"foo[socks,jwt]\"]\n</code></pre> <p>After that, dependencies and sub-dependencies will be resolved properly and installed for you, you can view <code>pdm.lock</code> to see the resolved result of all dependencies.</p>"},{"location":"usage/dependency/#local-dependencies","title":"Local dependencies","text":"<p>Local packages can be added with their paths. The path can be a file or a directory:</p> <pre><code>pdm add ./sub-package\npdm add ./first-1.0.0-py2.py3-none-any.whl\n</code></pre> <p>The paths MUST start with a <code>.</code>, otherwise it will be recognized as a normal named requirement. The local dependencies will be written to the <code>pyproject.toml</code> file with the URL format:</p> <pre><code>[project]\ndependencies = [\n\"sub-package @ file:///${PROJECT_ROOT}/sub-package\",\n\"first @ file:///${PROJECT_ROOT}/first-1.0.0-py2.py3-none-any.whl\",\n]\n</code></pre> Using other build backends <p>If you are using <code>hatchling</code> instead of the pdm backend, the URLs would be as follows:</p> <p><pre><code>sub-package @ {root:uri}/sub-package\nfirst @ {root:uri}/first-1.0.0-py2.py3-none-any.whl\n</code></pre> Other backends doesn't support encoding relative paths in the URL and will write the absolute path instead.</p>"},{"location":"usage/dependency/#url-dependencies","title":"URL dependencies","text":"<p>PDM also supports downloading and installing packages directly from a web address.</p> <p>Examples:</p> <pre><code># Install gzipped package from a plain URL\npdm add \"https://github.com/numpy/numpy/releases/download/v1.20.0/numpy-1.20.0.tar.gz\"\n# Install wheel from a plain URL\npdm add \"https://github.com/explosion/spacy-models/releases/download/en_core_web_trf-3.5.0/en_core_web_trf-3.5.0-py3-none-any.whl\"\n</code></pre>"},{"location":"usage/dependency/#vcs-dependencies","title":"VCS dependencies","text":"<p>You can also install from a git repository url or other version control systems. The following are supported:</p> <ul> <li>Git: <code>git</code></li> <li>Mercurial: <code>hg</code></li> <li>Subversion: <code>svn</code></li> <li>Bazaar: <code>bzr</code></li> </ul> <p>The URL should be like: <code>{vcs}+{url}@{rev}</code></p> <p>Examples:</p> <pre><code># Install pip repo on tag `22.0`\npdm add \"git+https://github.com/pypa/pip.git@22.0\"\n# Provide credentials in the URL\npdm add \"git+https://username:password@github.com/username/private-repo.git@master\"\n# Give a name to the dependency\npdm add \"pip @ git+https://github.com/pypa/pip.git@22.0\"\n# Or use the #egg fragment\npdm add \"git+https://github.com/pypa/pip.git@22.0#egg=pip\"\n# Install from a subdirectory\npdm add \"git+https://github.com/owner/repo.git@master#egg=pkg&amp;subdirectory=subpackage\"\n</code></pre>"},{"location":"usage/dependency/#hide-credentials-in-the-url","title":"Hide credentials in the URL","text":"<p>You can hide the credentials in the URL by using the <code>${ENV_VAR}</code> variable syntax:</p> <pre><code>[project]\ndependencies = [\n\"mypackage @ git+http://${VCS_USER}:${VCS_PASSWD}@test.git.com/test/mypackage.git@master\"\n]\n</code></pre> <p>These variables will be read from the environment variables when installing the project.</p>"},{"location":"usage/dependency/#add-development-only-dependencies","title":"Add development only dependencies","text":"<p>New in 1.5.0</p> <p>PDM also supports defining groups of dependencies that are useful for development, e.g. some for testing and others for linting. We usually don't want these dependencies appear in the distribution's metadata so using <code>optional-dependencies</code> is probably not a good idea. We can define them as development dependencies:</p> <pre><code>pdm add -dG test pytest\n</code></pre> <p>This will result in a pyproject.toml as following:</p> <pre><code>[tool.pdm.dev-dependencies]\ntest = [\"pytest\"]\n</code></pre> <p>You can have several groups of development only dependencies. Unlike <code>optional-dependencies</code>, they won't appear in the package distribution metadata such as <code>PKG-INFO</code> or <code>METADATA</code>. The package index won't be aware of these dependencies. The schema is similar to that of <code>optional-dependencies</code>, except that it is in <code>tool.pdm</code> table.</p> <p><pre><code>[tool.pdm.dev-dependencies]\nlint = [\n\"flake8\",\n\"black\"\n]\ntest = [\"pytest\", \"pytest-cov\"]\ndoc = [\"mkdocs\"]\n</code></pre> For backward-compatibility, if only <code>-d</code> or <code>--dev</code> is specified, dependencies will go to <code>dev</code> group under <code>[tool.pdm.dev-dependencies]</code> by default.</p> <p>Note</p> <p>The same group name MUST NOT appear in both <code>[tool.pdm.dev-dependencies]</code> and <code>[project.optional-dependencies]</code>.</p>"},{"location":"usage/dependency/#editable-dependencies","title":"Editable dependencies","text":"<p>Local directories and VCS dependencies can be installed in editable mode. If you are familiar with <code>pip</code>, it is just like <code>pip install -e &lt;package&gt;</code>. Editable packages are allowed only in development dependencies:</p> <p>Note</p> <p>Editable installs are only allowed in the <code>dev</code> dependency group. Other groups, including the default, will fail with a <code>[PdmUsageError]</code>.</p> <pre><code># A relative path to the directory\npdm add -e ./sub-package --dev\n# A file URL to a local directory\npdm add -e file:///path/to/sub-package --dev\n# A VCS URL\npdm add -e git+https://github.com/pallets/click.git@main#egg=click --dev\n</code></pre>"},{"location":"usage/dependency/#save-version-specifiers","title":"Save version specifiers","text":"<p>If the package is given without a version specifier like <code>pdm add requests</code>. PDM provides three different behaviors of what version specifier is saved for the dependency, which is given by <code>--save-&lt;strategy&gt;</code>(Assume <code>2.21.0</code> is the latest version that can be found for the dependency):</p> <ul> <li><code>minimum</code>: Save the minimum version specifier: <code>&gt;=2.21.0</code> (default).</li> <li><code>compatible</code>: Save the compatible version specifier: <code>&gt;=2.21.0,&lt;3.0.0</code>.</li> <li><code>exact</code>: Save the exact version specifier: <code>==2.21.0</code>.</li> <li><code>wildcard</code>: Don't constrain version and leave the specifier to be wildcard: <code>*</code>.</li> </ul>"},{"location":"usage/dependency/#add-prereleases","title":"Add prereleases","text":"<p>One can give <code>--pre/--prerelease</code> option to <code>pdm add</code> so that prereleases are allowed to be pinned for the given packages.</p>"},{"location":"usage/dependency/#update-existing-dependencies","title":"Update existing dependencies","text":"<p>To update all dependencies in the lock file:</p> <pre><code>pdm update\n</code></pre> <p>To update the specified package(s):</p> <pre><code>pdm update requests\n</code></pre> <p>To update multiple groups of dependencies:</p> <pre><code>pdm update -G security -G http\n</code></pre> <p>Or using comma-separated list:</p> <pre><code>pdm update -G \"security,http\"\n</code></pre> <p>To update a given package in the specified group:</p> <pre><code>pdm update -G security cryptography\n</code></pre> <p>If the group is not given, PDM will search for the requirement in the default dependencies set and raises an error if none is found.</p> <p>To update packages in development dependencies:</p> <pre><code># Update all default + dev-dependencies\npdm update -d\n# Update a package in the specified group of dev-dependencies\npdm update -dG test pytest\n</code></pre>"},{"location":"usage/dependency/#about-update-strategy","title":"About update strategy","text":"<p>Similarly, PDM also provides 2 different behaviors of updating dependencies and sub-dependencies\uff0c which is given by <code>--update-&lt;strategy&gt;</code> option:</p> <ul> <li><code>reuse</code>: Keep all locked dependencies except for those given in the command line (default).</li> <li><code>eager</code>: Try to lock a newer version of the packages in command line and their recursive sub-dependencies and keep other dependencies as they are.</li> <li><code>all</code>: Update all dependencies and sub-dependencies.</li> </ul>"},{"location":"usage/dependency/#update-packages-to-the-versions-that-break-the-version-specifiers","title":"Update packages to the versions that break the version specifiers","text":"<p>One can give <code>-u/--unconstrained</code> to tell PDM to ignore the version specifiers in the <code>pyproject.toml</code>. This works similarly to the <code>yarn upgrade -L/--latest</code> command. Besides, <code>pdm update</code> also supports the <code>--pre/--prerelease</code> option.</p>"},{"location":"usage/dependency/#remove-existing-dependencies","title":"Remove existing dependencies","text":"<p>To remove existing dependencies from project file and the library directory:</p> <pre><code># Remove requests from the default dependencies\npdm remove requests\n# Remove h11 from the 'web' group of optional-dependencies\npdm remove -G web h11\n# Remove pytest-cov from the `test` group of dev-dependencies\npdm remove -dG test pytest-cov\n</code></pre>"},{"location":"usage/dependency/#install-the-packages-pinned-in-lock-file","title":"Install the packages pinned in lock file","text":"<p>There are a few similar commands to do this job with slight differences:</p> <ul> <li><code>pdm sync</code> installs packages from the lock file.</li> <li><code>pdm update</code> will update the lock file, then <code>sync</code>.</li> <li><code>pdm install</code> will check the project file for changes, update the lock file if needed, then <code>sync</code>.</li> </ul> <p><code>sync</code> also has a few options to manage installed packages:</p> <ul> <li><code>--clean</code>: will remove packages no longer in the lockfile</li> <li><code>--only-keep</code>: only selected packages (using options like <code>-G</code> or <code>--prod</code>) will be kept.</li> </ul>"},{"location":"usage/dependency/#specify-the-lockfile-to-use","title":"Specify the lockfile to use","text":"<p>You can specify another lockfile than the default <code>pdm lock</code> by using the <code>-L/--lockfile &lt;filepath&gt;</code> option or the <code>PDM_LOCKFILE</code> environment variable.</p>"},{"location":"usage/dependency/#select-a-subset-of-dependency-groups-to-be-installed-or-locked","title":"Select a subset of dependency groups to be installed or locked","text":"<p>Say we have a project with following dependencies:</p> <pre><code>[project]  # This is production dependencies\ndependencies = [\"requests\"]\n\n[project.optional-dependencies]  # This is optional dependencies\nextra1 = [\"flask\"]\nextra2 = [\"django\"]\n\n[tool.pdm.dev-dependencies]  # This is dev dependencies\ndev1 = [\"pytest\"]\ndev2 = [\"mkdocs\"]\n</code></pre> Command What it does Comments <code>pdm install</code> install all groups locked in the lockfile <code>pdm install -G extra1</code> install prod deps, dev deps, and \"extra1\" optional group <code>pdm install -G dev1</code> install prod deps and only \"dev1\" dev group <code>pdm install -G:all</code> install prod deps, dev deps and \"extra1\", \"extra2\" optional groups <code>pdm install -G extra1 -G dev1</code> install prod deps, \"extra1\" optional group and only \"dev1\" dev group <code>pdm install --prod</code> install prod only <code>pdm install --prod -G extra1</code> install prod deps and \"extra1\" optional <code>pdm install --prod -G dev1</code> Fail, <code>--prod</code> can't be given with dev dependencies Leave the <code>--prod</code> option <p>All development dependencies are included as long as <code>--prod</code> is not passed and <code>-G</code> doesn't specify any dev groups.</p> <p>Besides, if you don't want the root project to be installed, add <code>--no-self</code> option, and <code>--no-editable</code> can be used when you want all packages to be installed in non-editable versions.</p> <p>You may also use the pdm lock command with these options to lock only the specified groups, which will be recorded in the <code>[metadata]</code> table of the lock file. If no <code>--group/--prod/--dev/--no-default</code> option is specified, <code>pdm sync</code> and <code>pdm update</code> will operate using the groups in the lockfile. However, if any groups that are not included in the lockfile are given as arguments to the commands, PDM will raise an error.</p> <p>This feature is especially valuable when managing multiple lockfiles, where each may have different versions of the same package pinned. To switch between lockfiles, you can use the <code>--lockfile/-L</code> option.</p> <p>For a realistic example, your project depends on a release version of <code>werkzeug</code> and you may want to work with a local in-development copy of it when developing. You can add the following to your <code>pyproject.toml</code>:</p> <pre><code>[project]\nrequires-python = \"&gt;=3.7\"\ndependencies = [\"werkzeug\"]\n\n[tool.pdm.dev-dependencies]\ndev = [\"werkzeug @ file:///${PROJECT_ROOT}/dev/werkzeug\"]\n</code></pre> <p>Then, run <code>pdm lock</code> with different options to generate lockfiles for different purposes:</p> <pre><code># Lock default + dev, write to pdm.lock\n# with the local copy of werkzeug pinned.\npdm lock\n# Lock default, write to pdm.prod.lock\n# with the release version of werkzeug pinned.\npdm lock --prod -L pdm.prod.lock\n</code></pre> <p>Check the <code>metadata.groups</code> field in the lockfile to see which groups are included.</p>"},{"location":"usage/dependency/#cross-platform-lockfile","title":"Cross-platform lockfile","text":"<p>By default, the generated lockfile is cross-platform, which means the current platform isn't taken into account when resolving the dependencies. The result lockfile will contain wheels and dependencies for all possible platforms and Python versions. However, sometimes this will result in a wrong lockfile when a release doesn't contain all wheels. To avoid this, you can tell PDM to create a lockfile that works for this platform only, trimming the wheels not relevant to the current platform. This can be done by passing the <code>--no-cross-platform</code> option to <code>pdm lock</code>:</p> <pre><code>pdm lock --no-cross-platform\n</code></pre>"},{"location":"usage/dependency/#show-what-packages-are-installed","title":"Show what packages are installed","text":"<p>Similar to <code>pip list</code>, you can list all packages installed in the packages directory:</p> <pre><code>pdm list\n</code></pre> <p>Or show a dependency graph by:</p> <pre><code>$ pdm list --graph\ntempenv 0.0.0\n\u2514\u2500\u2500 click 7.0 [ required: &lt;7.0.0,&gt;=6.7 ]\nblack 19.10b0\n\u251c\u2500\u2500 appdirs 1.4.3 [ required: Any ]\n\u251c\u2500\u2500 attrs 19.3.0 [ required: &gt;=18.1.0 ]\n\u251c\u2500\u2500 click 7.0 [ required: &gt;=6.5 ]\n\u251c\u2500\u2500 pathspec 0.7.0 [ required: &lt;1,&gt;=0.6 ]\n\u251c\u2500\u2500 regex 2020.2.20 [ required: Any ]\n\u251c\u2500\u2500 toml 0.10.0 [ required: &gt;=0.9.4 ]\n\u2514\u2500\u2500 typed-ast 1.4.1 [ required: &gt;=1.4.0 ]\nbump2version 1.0.0\n</code></pre>"},{"location":"usage/dependency/#allow-prerelease-versions-to-be-installed","title":"Allow prerelease versions to be installed","text":"<p>Include the following setting in <code>pyproject.toml</code> to enable:</p> <pre><code>[tool.pdm]\nallow_prereleases = true\n</code></pre>"},{"location":"usage/dependency/#set-acceptable-format-for-locking-or-installing","title":"Set acceptable format for locking or installing","text":"<p>If you want to control the format(binary/sdist) of the packages, you can set the env vars <code>PDM_NO_BINARY</code> and <code>PDM_ONLY_BINARY</code>.</p> <p>Each env var is a comma-separated list of package name. You can set it to <code>:all:</code> to apply to all packages. For example:</p> <pre><code># No binary for werkzeug will be locked nor used for installation\nPDM_NO_BINARY=werkzeug pdm add flask\n# Only binaries will be locked in the lock file\nPDM_ONLY_BINARY=:all: pdm lock\n# No binaries will be used for installation\nPDM_NO_BINARY=:all: pdm install\n# Prefer binary distributions and even if sdist with higher version is available\nPDM_PREFER_BINARY=flask pdm install\n</code></pre>"},{"location":"usage/dependency/#solve-the-locking-failure","title":"Solve the locking failure","text":"<p>If PDM is not able to find a resolution to satisfy the requirements, it will raise an error. For example,</p> <pre><code>pdm django==3.1.4 \"asgiref&lt;3\"\n...\n\ud83d\udd12 Lock failed\nUnable to find a resolution for asgiref because of the following conflicts:\n  asgiref&lt;3 (from project)\nasgiref&lt;4,&gt;=3.2.10 (from &lt;Candidate django 3.1.4 from https://pypi.org/simple/django/&gt;)\nTo fix this, you could loosen the dependency version constraints in pyproject.toml. If that is not possible, you could also override the resolved version in `[tool.pdm.resolution.overrides]` table.\n</code></pre> <p>You can either change to a lower version of <code>django</code> or remove the upper bound of <code>asgiref</code>. But if it is not eligible for your project, you can try overriding the resolved package versions in <code>pyproject.toml</code>.</p>"},{"location":"usage/dependency/#manage-global-project","title":"Manage global project","text":"<p>Sometimes users may want to keep track of the dependencies of global Python interpreter as well. It is easy to do so with PDM, via <code>-g/--global</code> option which is supported by most subcommands.</p> <p>If the option is passed, <code>&lt;CONFIG_ROOT&gt;/global-project</code> will be used as the project directory, which is almost the same as normal project except that <code>pyproject.toml</code> will be created automatically for you and it doesn't support build features. The idea is taken from Haskell's stack.</p> <p>However, unlike <code>stack</code>, by default, PDM won't use global project automatically if a local project is not found. Users should pass <code>-g/--global</code> explicitly to activate it, since it is not very pleasing if packages go to a wrong place. But PDM also leave the decision to users, just set the config <code>global_project.fallback</code> to <code>true</code>.</p> <p>By default, when <code>pdm</code> uses global project implicitly the following message is printed: <code>Project is not found, fallback to the global project</code>. To disable this message set the config <code>global_project.fallback_verbose</code> to <code>false</code>.</p> <p>If you want global project to track another project file other than <code>&lt;CONFIG_ROOT&gt;/global-project</code>, you can provide the project path via <code>-p/--project &lt;path&gt;</code> option.</p> <p>Warning</p> <p>Be careful with <code>remove</code> and <code>sync --clean/--pure</code> commands when global project is used, because it may remove packages installed in your system Python.</p>"},{"location":"usage/dependency/#export-locked-packages-to-alternative-formats","title":"Export locked packages to alternative formats","text":"<p>You can also export <code>pdm lock</code> to other formats, to ease the CI flow or image building process. Currently, only <code>requirements.txt</code> format is supported:</p> <pre><code>pdm export -o requirements.txt\n</code></pre> <p>Note</p> <p>You can also run <code>pdm export</code> with a <code>.pre-commit</code> hook.</p>"},{"location":"usage/hooks/","title":"Lifecycle and Hooks","text":"<p>As any Python deliverable, your project will go through the different phases of a Python project lifecycle and PDM provides commands to perform the expected tasks for those phases.</p> <p>It also provides hooks attached to these steps allowing for:</p> <ul> <li>plugins to listen to the signals of the same name.</li> <li>developers to define custom scripts with the same name.</li> </ul> <p>Besides, <code>pre_invoke</code> signal is emitted before ANY command is invoked, allowing plugins to modify the project or options beforehand.</p> <p>The built-in commands are currently split into 3 groups:</p> <ul> <li>the initialization phase</li> <li>the dependencies management.</li> <li>the publication phase.</li> </ul> <p>You will most probably need to perform some recurrent tasks between the installation and publication phases (housekeeping, linting, testing, ...) this is why PDM lets you define your own tasks/phases using user scripts.</p> <p>To provides full flexibility, PDM allows to skip some hooks and tasks on demand.</p>"},{"location":"usage/hooks/#initialization","title":"Initialization","text":"<p>The initialization phase should occur only once in a project lifetime by running the <code>pdm init</code> command to initialize an existing project (prompt to fill the <code>pyproject.toml</code> file).</p> <p>They trigger the following hooks:</p> <ul> <li><code>post_init</code></li> </ul> <pre><code>flowchart LR\n  subgraph pdm-init [pdm init]\n    direction LR\n    post-init{{Emit post_init}}\n    init --&gt; post-init\n  end</code></pre>"},{"location":"usage/hooks/#dependencies-management","title":"Dependencies management","text":"<p>The dependencies management is required for the developer to be able to work and perform the following:</p> <ul> <li><code>lock</code>: compute a lock file from the <code>pyproject.toml</code> requirements.</li> <li><code>sync</code>: synchronize (add/remove/update) PEP582 packages from the lock file and install the current project as editable.</li> <li><code>add</code>: add a dependency</li> <li><code>remove</code>: remove a dependency</li> </ul> <p>All those steps are directly available with the following commands:</p> <ul> <li><code>pdm lock</code>: execute the <code>lock</code> task</li> <li><code>pdm sync</code>: execute the <code>sync</code> task</li> <li><code>pdm install</code>: execute the <code>sync</code> task, preceded from <code>lock</code> if required</li> <li><code>pdm add</code>: add a dependency requirement, re-lock and then sync</li> <li><code>pdm remove</code>: remove a dependency requirement, re-lock and then sync</li> <li><code>pdm update</code>: re-lock dependencies from their latest versions and then sync</li> </ul> <p>They trigger the following hooks:</p> <ul> <li><code>pre_install</code></li> <li><code>post_install</code></li> <li><code>pre_lock</code></li> <li><code>post_lock</code></li> </ul> <pre><code>flowchart LR\n  subgraph pdm-install [pdm install]\n    direction LR\n\n    subgraph pdm-lock [pdm lock]\n      direction TB\n      pre-lock{{Emit pre_lock}}\n      post-lock{{Emit post_lock}}\n      pre-lock --&gt; lock --&gt; post-lock\n    end\n\n    subgraph pdm-sync [pdm sync]\n      direction TB\n      pre-install{{Emit pre_install}}\n      post-install{{Emit post_install}}\n      pre-install --&gt; sync --&gt; post-install\n    end\n\n    pdm-lock --&gt; pdm-sync\n  end</code></pre>"},{"location":"usage/hooks/#switching-python-version","title":"Switching Python version","text":"<p>This is a special case in dependency management: you can switch the current Python version using <code>pdm use</code> and it will emit the <code>post_use</code> signal with the new Python interpreter.</p> <pre><code>flowchart LR\n  subgraph pdm-use [pdm use]\n    direction LR\n    post-use{{Emit post_use}}\n    use --&gt; post-use\n  end</code></pre>"},{"location":"usage/hooks/#publication","title":"Publication","text":"<p>As soon as you are ready to publish your package/library, you will require the publication tasks:</p> <ul> <li><code>build</code>: build/compile assets requiring it and package everything into a Python package (sdist, wheel)</li> <li><code>upload</code>: upload/publish the package to a remote PyPI index</li> </ul> <p>All those steps are available with the following commands:</p> <ul> <li><code>pdm build</code></li> <li><code>pdm publish</code></li> </ul> <p>They trigger the following hooks:</p> <ul> <li><code>pre_publish</code></li> <li><code>post_publish</code></li> <li><code>pre_build</code></li> <li><code>post_build</code></li> </ul> <pre><code>flowchart LR\n  subgraph pdm-publish [pdm publish]\n    direction LR\n    pre-publish{{Emit pre_publish}}\n    post-publish{{Emit post_publish}}\n\n    subgraph pdm-build [pdm build]\n      pre-build{{Emit pre_build}}\n      post-build{{Emit post_build}}\n      pre-build --&gt; build --&gt; post-build\n    end\n\n    %% subgraph pdm-upload [pdm upload]\n    %%   pre-upload{{Emit pre_upload}}\n    %%   post-upload{{Emit post_upload}}\n    %%   pre-upload --&gt; upload --&gt; post-upload\n    %% end\n\n    pre-publish --&gt; pdm-build --&gt; upload --&gt; post-publish\n  end</code></pre> <p>Execution will stop at first failure, hooks included.</p>"},{"location":"usage/hooks/#user-scripts","title":"User scripts","text":"<p>User scripts are detailed in their own section but you should know that:</p> <ul> <li>each user script can define a <code>pre_*</code> and <code>post_*</code> script, including composite scripts.</li> <li>each <code>run</code> execution will trigger the <code>pre_run</code> and <code>post_run</code> hooks</li> <li>each script execution will trigger the <code>pre_script</code> and <code>post_script</code> hooks</li> </ul> <p>Given the following <code>scripts</code> definition:</p> <pre><code>[tool.pdm.scripts]\npre_script = \"\"\npost_script = \"\"\npre_test = \"\"\npost_test = \"\"\ntest = \"\"\npre_composite = \"\"\npost_composite = \"\"\ncomposite = {composite = [\"test\"]}\n</code></pre> <p>a <code>pdm run test</code> will have the following lifecycle:</p> <pre><code>flowchart LR\n  subgraph pdm-run-test [pdm run test]\n    direction LR\n    pre-run{{Emit pre_run}}\n    post-run{{Emit post_run}}\n    subgraph run-test [test task]\n      direction TB\n      pre-script{{Emit pre_script}}\n      post-script{{Emit post_script}}\n      pre-test[Execute pre_test]\n      post-test[Execute post_test]\n      test[Execute test]\n\n      pre-script --&gt; pre-test --&gt; test --&gt; post-test --&gt; post-script\n    end\n\n    pre-run --&gt; run-test --&gt; post-run\n  end</code></pre> <p>while <code>pdm run composite</code> will have the following:</p> <pre><code>flowchart LR\n  subgraph pdm-run-composite [pdm run composite]\n    direction LR\n    pre-run{{Emit pre_run}}\n    post-run{{Emit post_run}}\n\n    subgraph run-composite [composite task]\n      direction TB\n      pre-script-composite{{Emit pre_script}}\n      post-script-composite{{Emit post_script}}\n      pre-composite[Execute pre_composite]\n      post-composite[Execute post_composite]\n\n      subgraph run-test [test task]\n        direction TB\n        pre-script-test{{Emit pre_script}}\n        post-script-test{{Emit post_script}}\n        pre-test[Execute pre_test]\n        post-test[Execute post_test]\n\n        pre-script-test --&gt; pre-test --&gt; test --&gt; post-test --&gt; post-script-test\n      end\n\n      pre-script-composite --&gt; pre-composite --&gt; run-test --&gt; post-composite --&gt; post-script-composite\n    end\n\n     pre-run --&gt; run-composite --&gt; post-run\n  end</code></pre>"},{"location":"usage/hooks/#skipping","title":"Skipping","text":"<p>It is possible to control which task and hook runs for any built-in command as well as custom user scripts using the <code>--skip</code> option.</p> <p>It accepts a comma-separated list of hooks/task names to skip as well as the predefined <code>:all</code>, <code>:pre</code> and <code>:post</code> shortcuts respectively skipping all hooks, all <code>pre_*</code> hooks and all <code>post_*</code> hooks. You can also provide the skip list in <code>PDM_SKIP_HOOKS</code> environment variable but it will be overridden as soon as the <code>--skip</code> parameter is provided.</p> <p>Given the previous script block, running <code>pdm run --skip=:pre,post_test composite</code> will result in the following reduced lifecycle:</p> <pre><code>flowchart LR\n  subgraph pdm-run-composite [pdm run composite]\n    direction LR\n    post-run{{Emit post_run}}\n\n    subgraph run-composite [composite task]\n      direction TB\n      post-script-composite{{Emit post_script}}\n      post-composite[Execute post_composite]\n\n      subgraph run-test [test task]\n        direction TB\n        post-script-test{{Emit post_script}}\n\n        test --&gt; post-script-test\n      end\n\n      run-test --&gt; post-composite --&gt; post-script-composite\n    end\n\n     run-composite --&gt; post-run\n  end</code></pre>"},{"location":"usage/pep582/","title":"Working with PEP 582","text":"<p>PEP 582 has been rejected</p> <p>This is a rejected PEP. However, due to the fact that this feature is the reason for PDM's birth, PDM will retain the support. We recommend using virtual environments instead.</p> <p>With PEP 582, dependencies will be installed into <code>__pypackages__</code> directory under the project root. With PEP 582 enabled globally, you can also use the project interpreter to run scripts directly.</p> <p>When the project interpreter is a normal Python, this mode is enabled.</p> <p>Besides, on a project you work with for the first time on your machine, if it contains an empty <code>__pypackages__</code> directory, PEP 582 is enabled automatically, and virtualenv won't be created.</p>"},{"location":"usage/pep582/#enable-pep-582-globally","title":"Enable PEP 582 globally","text":"<p>To make the Python interpreters aware of PEP 582 packages, one need to add the <code>pdm/pep582/sitecustomize.py</code> to the Python library search path.</p> WindowsMac and Linux <p>One just needs to execute <code>pdm --pep582</code>, then environment variable will be changed automatically. Don't forget to restart the terminal session to take effect.</p> <p>The command to change the environment variables can be printed by <code>pdm --pep582 [&lt;SHELL&gt;]</code>. If <code>&lt;SHELL&gt;</code> isn't given, PDM will pick one based on some guesses. You can run <code>eval \"$(pdm --pep582)\"</code> to execute the command.</p> <p>You may want to write a line in your <code>.bash_profile</code>(or similar profiles) to make it effective when logging in. For example, in bash you can do this:</p> <pre><code>pdm --pep582 &gt;&gt; ~/.bash_profile\n</code></pre> <p>Once again, Don't forget to restart the terminal session to take effect.</p> How is it done? <p>Thanks to the site packages loading on Python startup. It is possible to patch the <code>sys.path</code> by executing the <code>sitecustomize.py</code> shipped with PDM. The interpreter can search the directories for the nearest <code>__pypackage__</code> folder and append it to the <code>sys.path</code> variable.</p>"},{"location":"usage/pep582/#configure-ide-to-support-pep-582","title":"Configure IDE to support PEP 582","text":"<p>Now there are no built-in support or plugins for PEP 582 in most IDEs, you have to configure your tools manually.</p>"},{"location":"usage/pep582/#pycharm","title":"PyCharm","text":"<p>Mark <code>__pypackages__/&lt;major.minor&gt;/lib</code> as Sources Root. Then, select as Python interpreter a Python installation with the same <code>&lt;major.minor&gt;</code> version.</p> <p>Additionally, if you want to use tools from the environment (e.g. <code>pytest</code>), you have to add the <code>__pypackages__/&lt;major.minor&gt;/bin</code> directory to the <code>PATH</code> variable in the corresponding run/debug configuration.</p>"},{"location":"usage/pep582/#vscode","title":"VSCode","text":"<p>Add the following two entries to the top-level dict in <code>.vscode/settings.json</code>:</p> <pre><code>{\n\"python.autoComplete.extraPaths\": [\"__pypackages__/&lt;major.minor&gt;/lib\"],\n\"python.analysis.extraPaths\": [\"__pypackages__/&lt;major.minor&gt;/lib\"]\n}\n</code></pre> <p>This file can be auto-generated with plugin <code>pdm-vscode</code>.</p> <p>Enable PEP582 globally, and make sure VSCode runs using the same user and shell you enabled PEP582 for.</p> Cannot enable PEP582 globally? <p>If for some reason you cannot enable PEP582 globally, you can still configure each \"launch\" in each project: set the <code>PYTHONPATH</code> environment variable in your launch configuration, in <code>.vscode/launch.json</code>. For example, to debug your <code>pytest</code> run:</p> <pre><code>{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"name\": \"pytest\",\n\"type\": \"python\",\n\"request\": \"launch\",\n\"module\": \"pytest\",\n\"args\": [\"tests\"],\n\"justMyCode\": false,\n\"env\": {\"PYTHONPATH\": \"__pypackages__/&lt;major.minor&gt;/lib\"}\n}\n]\n}\n</code></pre> <p>If your package resides in a <code>src</code> directory, add it to <code>PYTHONPATH</code> as well:</p> <pre><code>\"env\": {\"PYTHONPATH\": \"src:__pypackages__/&lt;major.minor&gt;/lib\"}\n</code></pre> Using Pylance/Pyright? <p>If you have configured <code>\"python.analysis.diagnosticMode\": \"workspace\"</code>, and you see a ton of errors/warnings as a result. you may need to create <code>pyrightconfig.json</code> in the workspace directory, and fill in the following fields:</p> <pre><code>{\n\"exclude\": [\"__pypackages__\"]\n}\n</code></pre> <p>Then restart the language server or VS Code and you're good to go. In the future (microsoft/pylance-release#1150), maybe the problem will be solved.</p> Using Jupyter Notebook? <p>If you wish to use pdm to install jupyter notebook and use it in vscode in conjunction with the python extension:</p> <ol> <li>Use <code>pdm add notebook</code> or so to install notebook</li> <li>Add a <code>.env</code> file inside of your project directory with contents like the following:</li> </ol> <pre><code>PYTHONPATH=/your-workspace-path/__pypackages__/&lt;major&gt;.&lt;minor&gt;/lib\n</code></pre> <p>If the above still doesn't work, it's most likely because the environment variable is not properly loaded when the Notebook starts. There are two workarounds.</p> <ol> <li>Run <code>code .</code> in Terminal. It will open a new VSCode window in the current directory with the path set correctly. Use the Jupyter Notebook in the new window</li> <li>If you prefer not to open a new window, run the following at the beginning of your Jupyter Notebook to explicitly set the path:</li> </ol> <pre><code>import sys\nsys.path.append('/your-workspace-path/__pypackages__/&lt;major&gt;.&lt;minor&gt;/lib')\n</code></pre> <p>Reference Issue</p> PDM Task Provider <p>In addition, there is a VSCode Task Provider extension available for download.</p> <p>This makes it possible for VSCode to automatically detect pdm scripts so they can be run natively as VSCode Tasks.</p>"},{"location":"usage/pep582/#neovim","title":"Neovim","text":"<p>If using neovim-lsp with pyright and want your <code>__pypackages__</code> directory to be added to the path, you can add this to your project's <code>pyproject.toml</code>.</p> <pre><code>[tool.pyright]\nextraPaths = [\"__pypackages__/&lt;major.minor&gt;/lib/\"]\n</code></pre>"},{"location":"usage/pep582/#emacs","title":"Emacs","text":"<p>You have a few options, but basically you'll want to tell an LSP client to add <code>__pypackages__</code> to the paths it looks at. Here are a few options that are available:</p>"},{"location":"usage/pep582/#using-pyprojecttoml-and-pyright","title":"Using <code>pyproject.toml</code> and pyright","text":"<p>Add this to your project's <code>pyproject.toml</code>:</p> <pre><code>[tool.pyright]\nextraPaths = [\"__pypackages__/&lt;major.minor&gt;/lib/\"]\n</code></pre>"},{"location":"usage/pep582/#eglot-pyright","title":"eglot + pyright","text":"<p>Using pyright and eglot (included in Emacs 29), add the following to your config:</p> <pre><code>(defun get-pdm-packages-path ()\n\"For the current PDM project, find the path to the packages.\"\n(let ((packages-path (string-trim (shell-command-to-string \"pdm info --packages\"))))\n(concat packages-path \"/lib\")))\n\n(defun my/eglot-workspace-config (server)\n\"For the current PDM project, dynamically generate a python lsp config.\"\n`(:python\\.analysis (:extraPaths ,(vector (get-pdm-packages-path)))))\n\n(setq-default eglot-workspace-configuration #'my/eglot-workspace-config)\n</code></pre> <p>You'll want pyright installed either globally, or in your project (probably as a dev dependency). You can add this with, for example:</p> <pre><code>pdm add --dev --group devel pyright\n</code></pre>"},{"location":"usage/pep582/#lsp-mode-lsp-python-ms","title":"LSP-Mode + lsp-python-ms","text":"<p>Below is a sample code snippet showing how to make PDM work with lsp-python-ms in Emacs. Contributed by @linw1995.</p> <pre><code>  ;; TODO: Cache result\n(defun linw1995/pdm-get-python-executable (&amp;optional dir)\n(let ((pdm-get-python-cmd \"pdm info --python\"))\n(string-trim\n(shell-command-to-string\n(if dir\n(concat \"cd \"\ndir\n\" &amp;&amp; \"\npdm-get-python-cmd)\npdm-get-python-cmd)))))\n\n(defun linw1995/pdm-get-packages-path (&amp;optional dir)\n(let ((pdm-get-packages-cmd \"pdm info --packages\"))\n(concat (string-trim\n(shell-command-to-string\n(if dir\n(concat \"cd \"\ndir\n\" &amp;&amp; \"\npdm-get-packages-cmd)\npdm-get-packages-cmd)))\n\"/lib\")))\n\n(use-package lsp-python-ms\n:ensure t\n:init (setq lsp-python-ms-auto-install-server t)\n:hook (python-mode\n. (lambda ()\n(setq lsp-python-ms-python-executable (linw1995/pdm-get-python-executable))\n(setq lsp-python-ms-extra-paths (vector (linw1995/pdm-get-packages-path)))\n(require 'lsp-python-ms)\n(lsp))))  ; or lsp-deferred\n</code></pre>"},{"location":"usage/project/","title":"New Project","text":"<p>To start with, create a new project with <code>pdm init</code>:</p> <pre><code>mkdir my-project &amp;&amp; cd my-project\npdm init\n</code></pre> <p>You will need to answer a few questions, to help PDM to create a <code>pyproject.toml</code> file for you.</p>"},{"location":"usage/project/#choose-a-python-interpreter","title":"Choose a Python interpreter","text":"<p>At first, you need to choose a Python interpreter from a list of Python versions installed on your machine. The interpreter path will be stored in <code>.pdm-python</code> and used by subsequent commands. You can also change it later with <code>pdm use</code>.</p> <p>Alternatively, you can specify the Python interpreter path via <code>PDM_PYTHON</code> environment variable. When it is set, the path saved in <code>.pdm-python</code> will be ignored.</p>"},{"location":"usage/project/#virtualenv-or-not","title":"Virtualenv or not","text":"<p>After you select the Python interpreter, PDM will ask you whether you want to create a virtual environment for the project. If you choose yes, PDM will create a virtual environment in the project root directory, and use it as the Python interpreter for the project.</p> <p>If the selected Python interpreter is in a virtual environment, PDM will use it as the project environment and install dependencies into it. Otherwise, <code>__pypackages__</code> will be created in the project root and dependencies will be installed into it.</p> <p>For the difference between these two approaches, please refer to the corresponding sections in the docs:</p> <ul> <li>Virtualenv</li> <li><code>__pypackages__</code>(PEP 582)</li> </ul>"},{"location":"usage/project/#library-or-application","title":"Library or Application","text":"<p>A library and an application differ in many ways. In short, a library is a package that is intended to be installed and used by other projects. In most cases it also needs to be uploaded to PyPI. An application, on the other hand, is one that is directly facing end users and may need to be deployed into some production environments.</p> <p>In PDM, if you choose to create a library, PDM will add a <code>name</code>, <code>version</code> field to the <code>pyproject.toml</code> file, as well as a <code>[build-system]</code> table for the build backend, which is only useful if your project needs to be built and distributed. So you need to manually add these fields to <code>pyproject.toml</code> if you want to change the project from an application to a library. Also, a library project will be installed into the environment when you run <code>pdm install</code> or <code>pdm sync</code>, unless <code>--no-self</code> is specified.</p>"},{"location":"usage/project/#set-requires-python-value","title":"Set <code>requires-python</code> value","text":"<p>You need to set an appropriate <code>requires-python</code> value for your project. This is an important property that affects how dependencies are resolved. Basically, each package's <code>requires-python</code> must cover the project's <code>requires-python</code> range. For example, consider the following setup:</p> <ul> <li>Project: <code>requires-python = \"&gt;=3.9\"</code></li> <li>Package <code>foo</code>: <code>requires-python = \"&gt;=3.7,&lt;3.11\"</code></li> </ul> <p>Resolving the dependencies will cause a <code>ResolutionImpossible</code>:</p> <pre><code>Unable to find a resolution because the following dependencies don't work\non all Python versions defined by the project's `requires-python`\n</code></pre> <p>Because the dependency's <code>requires-python</code> is <code>&gt;=3.7,&lt;3.11</code>, it doesn't cover the project's <code>requires-python</code> range of <code>&gt;=3.9</code>. In other words, the project promises to work on Python 3.11 and above, but the dependency doesn't support it. Since PDM creates a cross-platform lockfile that should work on all Python versions within the <code>requires-python</code> range, it can't find a valid resolution. To fix this, you need add a maximum version to <code>requires-python</code>, like <code>&gt;=3.9,&lt;3.11</code>.</p> <p>The value of <code>requires-python</code> is a version specifier as defined in PEP 440. Here are some examples:</p> <code>requires-python</code> Meaning <code>&gt;=3.7</code> Python 3.7 and above <code>&gt;=3.7,&lt;3.11</code> Python 3.7, 3.8 and 3.10 <code>&gt;=3.6,!=3.8.*,!=3.9.*</code> Python 3.6 and above, except 3.8 and 3.9"},{"location":"usage/project/#working-with-python-37","title":"Working with Python &lt; 3.7","text":"<p>Although PDM run on Python 3.7 and above, you can still have lower Python versions for your working project. But remember, if your project is a library, which needs to be built, published or installed, you make sure the PEP 517 build backend being used supports the lowest Python version you need. For instance, the default backend <code>pdm-pep517</code> only works on Python 3.7+, so if you run <code>pdm build</code> on a project with Python 3.6, you will get an error. Most modern build backends have dropped the support for Python 3.6 and lower, so it is highly recommended to upgrade the Python version to 3.7+. Here are the supported Python range for some commonly used build backends, we only list those that support PEP 621 since otherwise PDM can't work with them.</p> Backend Supported Python Support PEP 621 <code>pdm-pep517</code> <code>&gt;=3.7</code> Yes <code>setuptools&gt;=60</code> <code>&gt;=3.7</code> Experimental <code>hatchling</code> <code>&gt;=3.7</code> Yes <code>flit-core&gt;=3.4</code> <code>&gt;=3.6</code> Yes <code>flit-core&gt;=3.2,&lt;3.4</code> <code>&gt;=3.4</code> Yes <p>Note that if your project is an application(without <code>name</code> metadata), the above limitation of backends don't apply, since you don't need a build backend after all, and you can use a Python version up to <code>2.7</code>.</p>"},{"location":"usage/project/#import-the-project-from-other-package-managers","title":"Import the project from other package managers","text":"<p>If you are already using other package manager tools like Pipenv or Poetry, it is easy to migrate to PDM. PDM provides <code>import</code> command so that you don't have to initialize the project manually, it now supports:</p> <ol> <li>Pipenv's <code>Pipfile</code></li> <li>Poetry's section in <code>pyproject.toml</code></li> <li>Flit's section in <code>pyproject.toml</code></li> <li><code>requirements.txt</code> format used by pip</li> <li>setuptools <code>setup.py</code>(It requires <code>setuptools</code> to be installed in the project environment. You can do this by configuring <code>venv.with_pip</code> to <code>true</code> for venv and <code>pdm add setuptools</code> for <code>__pypackages__</code>)</li> </ol> <p>Also, when you are executing <code>pdm init</code> or <code>pdm install</code>, PDM can auto-detect possible files to import if your PDM project has not been initialized yet.</p> <p>Info</p> <p>Converting a <code>setup.py</code> will execute the file with the project interpreter. Make sure <code>setuptools</code> is installed with the interpreter and the <code>setup.py</code> is trusted.</p>"},{"location":"usage/project/#working-with-version-control","title":"Working with version control","text":"<p>You must commit the <code>pyproject.toml</code> file. You should commit the <code>pdm.lock</code> and <code>pdm.toml</code> file. Do not commit the <code>.pdm-python</code> file.</p> <p>The <code>pyproject.toml</code> file must be committed as it contains the project's build metadata and dependencies needed for PDM. It is also commonly used by other python tools for configuration. Read more about the <code>pyproject.toml</code> file at Pip documentation.</p> <p>You should be committing the <code>pdm.lock</code> file, by doing so you ensure that all installers are using the same versions of dependencies. To learn how to update dependencies see update existing dependencies.</p> <p><code>pdm.toml</code> contains some project-wide configuration and it may be useful to commit it for sharing.</p> <p><code>.pdm-python</code> stores the Python path used by the current project and doesn't need to be shared.</p>"},{"location":"usage/project/#show-the-current-python-environment","title":"Show the current Python environment","text":"<pre><code>$ pdm info\nPDM version:\n  2.0.0\nPython Interpreter:\n  /opt/homebrew/opt/python@3.9/bin/python3.9 (3.9)\nProject Root:\n  /Users/fming/wkspace/github/test-pdm\nProject Packages:\n  /Users/fming/wkspace/github/test-pdm/__pypackages__/3.9\n\n# Show environment info\n$ pdm info --env\n{\n\"implementation_name\": \"cpython\",\n  \"implementation_version\": \"3.8.0\",\n  \"os_name\": \"nt\",\n  \"platform_machine\": \"AMD64\",\n  \"platform_release\": \"10\",\n  \"platform_system\": \"Windows\",\n  \"platform_version\": \"10.0.18362\",\n  \"python_full_version\": \"3.8.0\",\n  \"platform_python_implementaiton\": \"CPython\",\n  \"python_version\": \"3.8\",\n  \"sys_platform\": \"win32\"\n}\n</code></pre> <p>This command is useful for checking which mode is being used by the project:</p> <ul> <li>If Project Packages is <code>None</code>, virtualenv mode is enabled.</li> <li>Otherwise, PEP 582 mode is enabled.</li> </ul> <p>Now, you have setup a new PDM project and get a <code>pyproject.toml</code> file. Refer to metadata section about how to write <code>pyproject.toml</code> properly.</p>"},{"location":"usage/publish/","title":"Build and Publish","text":"<p>If you are developing a library, after adding dependencies to your project, and finishing the coding, it's time to build and publish your package. It is as simple as one command:</p> <pre><code>pdm publish\n</code></pre> <p>This will automatically build a wheel and a source distribution(sdist), and upload them to the PyPI index.</p> <p>To specify another repository other than PyPI, use the <code>--repository</code> option, the parameter can be either the upload URL or the name of the repository stored in the config file.</p> <pre><code>pdm publish --repository testpypi\npdm publish --repository https://test.pypi.org/legacy/\n</code></pre>"},{"location":"usage/publish/#publish-with-trusted-publishers","title":"Publish with trusted publishers","text":"<p>You can configure trusted publishers for PyPI so that you don't need to expose the PyPI tokens in the release workflow. To do this, follow the guide to add a publisher and write the GitHub Actions workflow as below:</p> <pre><code>jobs:\npypi-publish:\nname: upload release to PyPI\nruns-on: ubuntu-latest\npermissions:\n# IMPORTANT: this permission is mandatory for trusted publishing\nid-token: write\nsteps:\n- uses: actions/checkout@v3\n\n- uses: pdm-project/setup-pdm@v3\n\n- name: Publish package distributions to PyPI\nrun: pdm publish\n</code></pre>"},{"location":"usage/publish/#build-and-publish-separately","title":"Build and publish separately","text":"<p>You can also build the package and upload it in two steps, to allow you to inspect the built artifacts before uploading.</p> <pre><code>pdm build\n</code></pre> <p>There are many options to control the build process, depending on the backend used. Refer to the build configuration section for more details.</p> <p>The artifacts will be created at <code>dist/</code> and able to upload to PyPI.</p> <pre><code>pdm publish --no-build\n</code></pre>"},{"location":"usage/scripts/","title":"PDM Scripts","text":"<p>Like <code>npm run</code>, with PDM, you can run arbitrary scripts or commands with local packages loaded.</p>"},{"location":"usage/scripts/#arbitrary-scripts","title":"Arbitrary Scripts","text":"<pre><code>pdm run flask run -p 54321\n</code></pre> <p>It will run <code>flask run -p 54321</code> in the environment that is aware of packages in your project environment.</p>"},{"location":"usage/scripts/#user-scripts","title":"User Scripts","text":"<p>PDM also supports custom script shortcuts in the optional <code>[tool.pdm.scripts]</code> section of <code>pyproject.toml</code>.</p> <p>You can then run <code>pdm run &lt;script_name&gt;</code> to invoke the script in the context of your PDM project. For example:</p> <pre><code>[tool.pdm.scripts]\nstart = \"flask run -p 54321\"\n</code></pre> <p>And then in your terminal:</p> <pre><code>$ pdm run start\nFlask server started at http://127.0.0.1:54321\n</code></pre> <p>Any following arguments will be appended to the command:</p> <pre><code>$ pdm run start -h 0.0.0.0\nFlask server started at http://0.0.0.0:54321\n</code></pre> <p>Yarn-like script shortcuts</p> <p>There is a builtin shortcut making all scripts available as root commands as long as the script does not conflict with any builtin or plugin-contributed command. Said otherwise, if you have a <code>start</code> script, you can run both <code>pdm run start</code> and <code>pdm start</code>. But if you have an <code>install</code> script, only <code>pdm run install</code> will run it, <code>pdm install</code> will still run the builtin <code>install</code> command.</p> <p>PDM supports 4 types of scripts:</p>"},{"location":"usage/scripts/#cmd","title":"<code>cmd</code>","text":"<p>Plain text scripts are regarded as normal command, or you can explicitly specify it:</p> <pre><code>[tool.pdm.scripts]\nstart = {cmd = \"flask run -p 54321\"}\n</code></pre> <p>In some cases, such as when wanting to add comments between parameters, it might be more convenient to specify the command as an array instead of a string:</p> <pre><code>[tool.pdm.scripts]\nstart = {cmd = [\n\"flask\",\n\"run\",\n# Important comment here about always using port 54321\n\"-p\", \"54321\"\n]}\n</code></pre>"},{"location":"usage/scripts/#shell","title":"<code>shell</code>","text":"<p>Shell scripts can be used to run more shell-specific tasks, such as pipeline and output redirecting. This is basically run via <code>subprocess.Popen()</code> with <code>shell=True</code>:</p> <pre><code>[tool.pdm.scripts]\nfilter_error = {shell = \"cat error.log|grep CRITICAL &gt; critical.log\"}\n</code></pre>"},{"location":"usage/scripts/#call","title":"<code>call</code>","text":"<p>The script can be also defined as calling a python function in the form <code>&lt;module_name&gt;:&lt;func_name&gt;</code>:</p> <pre><code>[tool.pdm.scripts]\nfoobar = {call = \"foo_package.bar_module:main\"}\n</code></pre> <p>The function can be supplied with literal arguments:</p> <pre><code>[tool.pdm.scripts]\nfoobar = {call = \"foo_package.bar_module:main('dev')\"}\n</code></pre>"},{"location":"usage/scripts/#composite","title":"<code>composite</code>","text":"<p>This script kind execute other defined scripts:</p> <pre><code>[tool.pdm.scripts]\nlint = \"flake8\"\ntest = \"pytest\"\nall = {composite = [\"lint\", \"test\"]}\n</code></pre> <p>Running <code>pdm run all</code> will run <code>lint</code> first and then <code>test</code> if <code>lint</code> succeeded.</p> <p>You can also provide arguments to the called scripts:</p> <pre><code>[tool.pdm.scripts]\nlint = \"flake8\"\ntest = \"pytest\"\nall = {composite = [\"lint mypackage/\", \"test -v tests/\"]}\n</code></pre> <p>Note</p> <p>Argument passed on the command line are given to each called task.</p>"},{"location":"usage/scripts/#script-options","title":"Script Options","text":""},{"location":"usage/scripts/#env","title":"<code>env</code>","text":"<p>All environment variables set in the current shell can be seen by <code>pdm run</code> and will be expanded when executed. Besides, you can also define some fixed environment variables in your <code>pyproject.toml</code>:</p> <pre><code>[tool.pdm.scripts]\nstart.cmd = \"flask run -p 54321\"\nstart.env = {FOO = \"bar\", FLASK_ENV = \"development\"}\n</code></pre> <p>Note how we use TOML's syntax to define a composite dictionary.</p> <p>Note</p> <p>Environment variables specified on a composite task level will override those defined by called tasks.</p>"},{"location":"usage/scripts/#env_file","title":"<code>env_file</code>","text":"<p>You can also store all environment variables in a dotenv file and let PDM read it:</p> <pre><code>[tool.pdm.scripts]\nstart.cmd = \"flask run -p 54321\"\nstart.env_file = \".env\"\n</code></pre> <p>The variables within the dotenv file will not override any existing environment variables. If you want the dotenv file to override existing environment variables use the following:</p> <pre><code>[tool.pdm.scripts]\nstart.cmd = \"flask run -p 54321\"\nstart.env_file.override = \".env\"\n</code></pre> <p>Note</p> <p>A dotenv file specified on a composite task level will override those defined by called tasks.</p>"},{"location":"usage/scripts/#site_packages","title":"<code>site_packages</code>","text":"<p>To make sure the running environment is properly isolated from the outer Python interpreter, site-packages from the selected interpreter WON'T be loaded into <code>sys.path</code>, unless any of the following conditions holds:</p> <ol> <li>The executable is from <code>PATH</code> but not inside the <code>__pypackages__</code> folder.</li> <li><code>-s/--site-packages</code> flag is following <code>pdm run</code>.</li> <li><code>site_packages = true</code> is in either the script table or the global setting key <code>_</code>.</li> </ol> <p>Note that site-packages will always be loaded if running with PEP 582 enabled(without the <code>pdm run</code> prefix).</p>"},{"location":"usage/scripts/#shared-options","title":"Shared Options","text":"<p>If you want the options to be shared by all tasks run by <code>pdm run</code>, you can write them under a special key <code>_</code> in <code>[tool.pdm.scripts]</code> table:</p> <pre><code>[tool.pdm.scripts]\n_.env_file = \".env\"\nstart = \"flask run -p 54321\"\nmigrate_db = \"flask db upgrade\"\n</code></pre> <p>Besides, inside the tasks, <code>PDM_PROJECT_ROOT</code> environment variable will be set to the project root.</p>"},{"location":"usage/scripts/#arguments-placeholder","title":"Arguments placeholder","text":"<p>By default, all user provided extra arguments are simply appended to the command (or to all the commands for <code>composite</code> tasks).</p> <p>If you want more control over the user provided extra arguments, you can use the <code>{args}</code> placeholder. It is available for all script types and will be interpolated properly for each:</p> <pre><code>[tool.pdm.scripts]\ncmd = \"echo '--before {args} --after'\"\nshell = {shell = \"echo '--before {args} --after'\"}\ncomposite = {composite = [\"cmd --something\", \"shell {args}\"]}\n</code></pre> <p>will produce the following interpolations (those are not real scripts, just here to illustrate the interpolation):</p> <pre><code>$ pdm run cmd --user --provided\n--before --user --provided --after\n$ pdm run cmd\n--before --after\n$ pdm run shell --user --provided\n--before --user --provided --after\n$ pdm run shell\n--before --after\n$ pdm run composite --user --provided\ncmd --something\nshell --before --user --provided --after\n$ pdm run composite\ncmd --something\nshell --before --after\n</code></pre> <p>You may optionally provide default values that will be used if no user arguments are provided:</p> <pre><code>[tool.pdm.scripts]\ntest = \"echo '--before {args:--default --value} --after'\"\n</code></pre> <p>will produce the following:</p> <pre><code>$ pdm run test --user --provided\n--before --user --provided --after\n$ pdm run test\n--before --default --value --after\n</code></pre> <p>Note</p> <p>As soon a placeholder is detected, arguments are not appended anymore. This is important for <code>composite</code> scripts because if a placeholder is detected on one of the subtasks, none for the subtasks will have the arguments appended, you need to explicitly pass the placeholder to every nested command requiring it.</p> <p>Note</p> <p><code>call</code> scripts don't support the <code>{args}</code> placeholder as they have access to <code>sys.argv</code> directly to handle such complexe cases and more.</p>"},{"location":"usage/scripts/#show-the-list-of-scripts","title":"Show the List of Scripts","text":"<p>Use <code>pdm run --list/-l</code> to show the list of available script shortcuts:</p> <pre><code>$ pdm run --list\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Name        \u2502 Type  \u2502 Description               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 test_cmd    \u2502 cmd   \u2502 flask db upgrade          \u2502\n\u2502 test_script \u2502 call  \u2502 call a python function    \u2502\n\u2502 test_shell  \u2502 shell \u2502 shell command             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>You can add an <code>help</code> option with the description of the script, and it will be displayed in the <code>Description</code> column in the above output.</p> <p>Note</p> <p>Tasks with a name starting with an underscore (<code>_</code>) are considered internal (helpers...) and are not shown in the listing.</p>"},{"location":"usage/scripts/#pre-post-scripts","title":"Pre &amp; Post Scripts","text":"<p>Like <code>npm</code>, PDM also supports tasks composition by pre and post scripts, pre script will be run before the given task and post script will be run after.</p> <pre><code>[tool.pdm.scripts]\npre_compress = \"{{ Run BEFORE the `compress` script }}\"\ncompress = \"tar czvf compressed.tar.gz data/\"\npost_compress = \"{{ Run AFTER the `compress` script }}\"\n</code></pre> <p>In this example, <code>pdm run compress</code> will run all these 3 scripts sequentially.</p> <p>The pipeline fails fast</p> <p>In a pipeline of pre - self - post scripts, a failure will cancel the subsequent execution.</p>"},{"location":"usage/scripts/#hook-scripts","title":"Hook Scripts","text":"<p>Under certain situations PDM will look for some special hook scripts for execution:</p> <ul> <li><code>post_init</code>: Run after <code>pdm init</code></li> <li><code>pre_install</code>: Run before installing packages</li> <li><code>post_install</code>: Run after packages are installed</li> <li><code>pre_lock</code>: Run before dependency resolution</li> <li><code>post_lock</code>: Run after dependency resolution</li> <li><code>pre_build</code>: Run before building distributions</li> <li><code>post_build</code>: Run after distributions are built</li> <li><code>pre_publish</code>: Run before publishinbg distributions</li> <li><code>post_publish</code>: Run after distributions are published</li> <li><code>pre_script</code>: Run before any script</li> <li><code>post_script</code>: Run after any script</li> <li><code>pre_run</code>: Run once before run script invocation</li> <li><code>post_run</code>: Run once after run script invocation</li> </ul> <p>Note</p> <p>Pre &amp; post scripts can't receive any arguments.</p> <p>Avoid name conflicts</p> <p>If there exists an <code>install</code> scripts under <code>[tool.pdm.scripts]</code> table, <code>pre_install</code> scripts can be triggered by both <code>pdm install</code> and <code>pdm run install</code>. So it is recommended to not use the preserved names.</p> <p>Note</p> <p>Composite tasks can also have pre and post scripts. Called tasks will run their own pre and post scripts.</p>"},{"location":"usage/scripts/#skipping-scripts","title":"Skipping scripts","text":"<p>Because, sometimes it is desirable to run a script but without its hooks or pre and post scripts, there is a <code>--skip=:all</code> which will disable all hooks, pre and post. There is also <code>--skip=:pre</code> and <code>--skip=:post</code> allowing to respectively skip all <code>pre_*</code> hooks and all <code>post_*</code> hooks.</p> <p>It is also possible to need a pre script but not the post one, or to need all tasks from a composite tasks except one. For those use cases, there is a finer grained <code>--skip</code> parameter accepting a list of tasks or hooks name to exclude.</p> <pre><code>pdm run --skip pre_task1,task2 my-composite\n</code></pre> <p>This command will run the <code>my-composite</code> task and skip the <code>pre_task1</code> hook as well as the <code>task2</code> and its hooks.</p> <p>You can also provide you skip list in <code>PDM_SKIP_HOOKS</code> environment variable but it will be overridden as soon as the <code>--skip</code> parameter is provided.</p> <p>There is more details on hooks and pre/post scripts behavior on the dedicated hooks page.</p>"},{"location":"usage/venv/","title":"Working with Virtual Environments","text":"<p>When you run <code>pdm init</code> command, PDM will ask for the Python interpreter to use in the project, which is the base interpreter to install dependencies and run tasks.</p> <p>Compared to PEP 582, virtual environments are considered more mature and have better support in the Python ecosystem as well as IDEs. Therefore, virtualenv is the default mode if not configured otherwise.</p> <p>Virtual environments will be used if the project interpreter(the interpreter stored in <code>.pdm-python</code>, which can be checked by <code>pdm info</code>) is from a virtualenv.</p>"},{"location":"usage/venv/#virtualenv-auto-creation","title":"Virtualenv auto-creation","text":"<p>By default, PDM prefers to use the virtualenv layout as other package managers do. When you run <code>pdm install</code> the first time on a new PDM-managed project, whose Python interpreter is not decided yet, PDM will create a virtualenv in <code>&lt;project_root&gt;/.venv</code>, and install dependencies into it. In the interactive session of <code>pdm init</code>, PDM will also ask to create a virtualenv for you.</p> <p>You can choose the backend used by PDM to create a virtualenv. Currently it supports three backends:</p> <ul> <li><code>virtualenv</code>(default)</li> <li><code>venv</code></li> <li><code>conda</code></li> </ul> <p>You can change it by <code>pdm config venv.backend [virtualenv|venv|conda]</code>.</p>"},{"location":"usage/venv/#create-a-virtualenv-yourself","title":"Create a virtualenv yourself","text":"<p>You can create more than one virtualenvs with whatever Python version you want.</p> <pre><code># Create a virtualenv based on 3.8 interpreter\n$ pdm venv create 3.8\n# Assign a different name other than the version string\n$ pdm venv create --name for-test 3.8\n# Use venv as the backend to create, support 3 backends: virtualenv(default), venv, conda\n$ pdm venv create --with venv 3.9\n</code></pre>"},{"location":"usage/venv/#the-location-of-virtualenvs","title":"The location of virtualenvs","text":"<p>For the first time, PDM will try to create a virtualenv in project, unless <code>.venv</code> already exists. Other virtualenvs go to the location specified by the <code>venv.location</code> configuration. They are named as <code>&lt;project_name&gt;-&lt;path_hash&gt;-&lt;name_or_python_version&gt;</code> to avoid name collision. A virtualenv created with <code>--name</code> option will always go to this location. You can disable the in-project virtualenv creation by <code>pdm config venv.in_project false</code>.</p>"},{"location":"usage/venv/#virtualenv-auto-detection","title":"Virtualenv auto-detection","text":"<p>When no interpreter is stored in the project config or <code>PDM_IGNORE_SAVED_PYTHON</code> env var is set, PDM will try to detect possible virtualenvs to use:</p> <ul> <li><code>venv</code>, <code>env</code>, <code>.venv</code> directories in the project root</li> <li>The currently activated virtualenv, unless <code>PDM_IGNORE_ACTIVE_VENV</code> is set</li> </ul>"},{"location":"usage/venv/#list-all-virtualenvs-created-with-this-project","title":"List all virtualenvs created with this project","text":"<pre><code>$ pdm venv list\nVirtualenvs created with this project:\n\n-  3.8.6: C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-3.8.6\n-  for-test: C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-for-test\n-  3.9.1: C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-3.9.1\n</code></pre>"},{"location":"usage/venv/#show-the-path-or-python-interpreter-of-a-virtualenv","title":"Show the path or python interpreter of a virtualenv","text":"<pre><code>$ pdm venv --path for-test\n$ pdm venv --python for-test\n</code></pre>"},{"location":"usage/venv/#remove-a-virtualenv","title":"Remove a virtualenv","text":"<pre><code>$ pdm venv remove for-test\nVirtualenvs created with this project:\nWill remove: C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-for-test, continue? [y/N]:y\nRemoved C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-for-test\n</code></pre>"},{"location":"usage/venv/#activate-a-virtualenv","title":"Activate a virtualenv","text":"<p>Instead of spawning a subshell like what <code>pipenv</code> and <code>poetry</code> do, <code>pdm-venv</code> doesn't create the shell for you but print the activate command to the console. In this way you won't leave the current shell. You can then feed the output to <code>eval</code> to activate the virtualenv:</p> bash/csh/zshPowershell <pre><code>$ eval $(pdm venv activate for-test)\n(test-project-for-test) $  # Virtualenv entered\nFish\n\n$ eval (pdm venv activate for-test)\n</code></pre> <pre><code>PS1&gt; Invoke-Expression (pdm venv activate for-test)\n</code></pre> <p>You can make your own shell shortcut function to avoid the input of long command. Here is an example of Bash:</p> <pre><code>pdm_venv_activate() {\n    eval $('pdm' 'venv' 'activate' \"$1\")\n}\n</code></pre> <p>Then you can activate it by <code>pdm_venv_activate $venv_name</code> and deactivate by deactivate directly.</p> <p>Additionally, if the project interpreter is a venv Python, you can omit the name argument following activate.</p> <p>Note</p> <p><code>venv activate</code> does not switch the Python interpreter used by the project. It only changes the shell by injecting the virtualenv paths to environment variables. For the forementioned purpose, use the <code>pdm use</code> command.</p> <p>For more CLI usage, see the <code>pdm venv</code> documentation.</p>"},{"location":"usage/venv/#prompt-customization","title":"Prompt customization","text":"<p>By default when you activate a virtualenv, the prompt will show: <code>{project_name}-{python_version}</code>.</p> <p>For example if your project is named <code>test-project</code>:</p> <pre><code>$ eval $(pdm venv activate for-test)\n(test-project-3.10) $  # {project_name} == test-project and {python_version} == 3.10\n</code></pre> <p>The format can be customized before virtualenv creation with the <code>venv.prompt</code> configuration or <code>PDM_VENV_PROMPT</code> environment variable (before a <code>pdm init</code> or <code>pdm venv create</code>). Available variables are:</p> <ul> <li><code>project_name</code>: name of your project</li> <li><code>python_version</code>: version of Python (used by the virtualenv)</li> </ul> <pre><code>$ PDM_VENV_PROMPT='{project_name}-py{python_version}' pdm venv create --name test-prompt\n$ eval $(pdm venv activate test-prompt)\n(test-project-py3.10) $\n</code></pre>"},{"location":"usage/venv/#run-a-command-in-a-virtual-environment-without-activating-it","title":"Run a command in a virtual environment without activating it","text":"<pre><code># Run a script\n$ pdm run --venv test test\n# Install packages\n$ pdm sync --venv test\n# List the packages installed\n$ pdm list --venv test\n</code></pre> <p>There are other commands supporting <code>--venv</code> flag or <code>PDM_IN_VENV</code> environment variable, see the CLI reference. You should create the virtualenv with <code>pdm venv create --name &lt;name&gt;</code> before using this feature.</p>"},{"location":"usage/venv/#switch-to-a-virtualenv-as-the-project-environment","title":"Switch to a virtualenv as the project environment","text":"<p>By default, if you use <code>pdm use</code> and select a non-venv Python, the project will be switched to PEP 582 mode. We also allow you to switch to a named virtual environment via the <code>--venv</code> flag:</p> <pre><code># Switch to a virtualenv named test\n$ pdm use --venv test\n# Switch to the in-project venv located at $PROJECT_ROOT/.venv\n$ pdm use --venv\n</code></pre>"},{"location":"usage/venv/#disable-virtualenv-mode","title":"Disable virtualenv mode","text":"<p>You can disable the auto-creation and auto-detection for virtualenv by <code>pdm config python.use_venv false</code>. If venv is disabled, PEP 582 mode will always be used even if the selected interpreter is from a virtualenv.</p>"},{"location":"usage/venv/#including-pip-in-your-virtual-environment","title":"Including pip in your virtual environment","text":"<p>By default PDM will not include <code>pip</code> in virtual environments. This increases isolation by ensuring that only your dependencies are installed in the virtual environment.</p> <p>To install <code>pip</code> once (if for example you want to install arbitrary dependencies in CI) you can run:</p> <pre><code># Install pip in the virtual environment\n$ pdm run python -m ensurepip\n# Install arbitrary dependencies\n# These dependencies are not checked for conflicts against lockfile dependencies!\n$ pdm run python -m pip install coverage\n</code></pre> <p>Or you can create the virtual environment with <code>--with-pip</code>:</p> <pre><code>$ pdm venv create --with-pip 3.9\n</code></pre> <p>See the ensurepip docs for more details on <code>ensurepip</code>.</p> <p>If you want to permanently configure PDM to include <code>pip</code> in virtual environments you can use the <code>venv.with_pip</code> configuration.</p>"}]}